{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/miho/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/miho/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/miho/source/images/alipay.png","path":"images/alipay.png","modified":1,"renderable":1},{"_id":"themes/miho/source/images/alipay_code.jpg","path":"images/alipay_code.jpg","modified":1,"renderable":1},{"_id":"themes/miho/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/miho/source/images/scrollbar_arrow.png","path":"images/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/miho/source/images/wechat.png","path":"images/wechat.png","modified":1,"renderable":1},{"_id":"themes/miho/source/images/wechat_code.jpg","path":"images/wechat_code.jpg","modified":1,"renderable":1},{"_id":"themes/miho/source/js/animate.js","path":"js/animate.js","modified":1,"renderable":1},{"_id":"themes/miho/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/miho/source/js/pace.min.js","path":"js/pace.min.js","modified":1,"renderable":1},{"_id":"themes/miho/source/js/particles.js","path":"js/particles.js","modified":1,"renderable":1},{"_id":"themes/miho/source/js/pop-img.js","path":"js/pop-img.js","modified":1,"renderable":1},{"_id":"themes/miho/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/miho/source/images/banner.jpg","path":"images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/miho/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"c61cef78bc2ff4fecf191e0450ca54e682e9a695","modified":1573219241673},{"_id":"source/README.md","hash":"3559228fe782801aaf131938e859e91ce91e5a9f","modified":1573462930763},{"_id":"themes/miho/.gitignore","hash":"854da42f35444ed19a8164cb7c213f66ae0e178c","modified":1573455436152},{"_id":"themes/miho/README.md","hash":"8c699eef9eaa29ad815d0acc9cc64917ba0678a0","modified":1573455436153},{"_id":"themes/miho/_config.yml","hash":"219e8c444c510e381edf8440c4e9be6651f14785","modified":1573461968340},{"_id":"source/_posts/docker.md","hash":"bee7b19b182338f54e03e18edf47f8a57a3da540","modified":1573458875051},{"_id":"source/_posts/hexo-blog.md","hash":"95901b9bf7d28aca8da7c07aa0869852a1a37fbc","modified":1573551238632},{"_id":"source/_posts/pyinstaller.md","hash":"b4d35a06eaedc04ac1ff6d2438640b2dfaaa4a0e","modified":1573439210424},{"_id":"source/_posts/python.md","hash":"77c96bd67fbf2680a7ec6baacbbf85cfc6c74e2f","modified":1573440295006},{"_id":"source/_posts/uwsgigi-server.md","hash":"4662ee231d6f0b42eaf7f72aa6271f9fc7149911","modified":1573439256769},{"_id":"source/about/index.md","hash":"d9f17cb6fd65348d667f2fd1c7c52501ef194cd5","modified":1573461508476},{"_id":"source/categories/index.md","hash":"17b675eebb492db6998ed1aeda8d98f2c00e2d07","modified":1573454329838},{"_id":"source/tags/index.md","hash":"71fe57ebf1736bf92d74358955f538c0ec92ec46","modified":1573218630071},{"_id":"themes/miho/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1573455436121},{"_id":"themes/miho/.git/config","hash":"a73999bb55731d92112cd256bab9349d1d325b83","modified":1573455436132},{"_id":"themes/miho/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1573455417026},{"_id":"themes/miho/.git/index","hash":"f76ea2d830be5abce994a2e9b13c88c6af6a2dcc","modified":1573455436225},{"_id":"themes/miho/.git/packed-refs","hash":"8479f62bc6a878997f1eb9a6fd59bbb3c6087a97","modified":1573455436112},{"_id":"themes/miho/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1573455436157},{"_id":"themes/miho/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1573455436157},{"_id":"themes/miho/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1573455436158},{"_id":"themes/miho/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1573455436159},{"_id":"themes/miho/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1573455436159},{"_id":"themes/miho/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1573455436160},{"_id":"themes/miho/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1573455436161},{"_id":"themes/miho/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1573455436185},{"_id":"themes/miho/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1573455436186},{"_id":"themes/miho/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1573455436186},{"_id":"themes/miho/layout/layout.ejs","hash":"8ddf881c939ba91919abc3077e0ea53418e00a6a","modified":1573455436187},{"_id":"themes/miho/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1573455436188},{"_id":"themes/miho/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1573455436188},{"_id":"themes/miho/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1573455436189},{"_id":"themes/miho/source/favicon.ico","hash":"35e86b04bcdeeec0cabdee2e968db69aa8202788","modified":1573455436212},{"_id":"themes/miho/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1573455417033},{"_id":"themes/miho/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1573455417039},{"_id":"themes/miho/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1573455417042},{"_id":"themes/miho/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1573455417047},{"_id":"themes/miho/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1573455417053},{"_id":"themes/miho/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1573455417061},{"_id":"themes/miho/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1573455417067},{"_id":"themes/miho/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1573455417076},{"_id":"themes/miho/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1573455417081},{"_id":"themes/miho/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1573455417087},{"_id":"themes/miho/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1573455417094},{"_id":"themes/miho/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1573455417099},{"_id":"themes/miho/.git/logs/HEAD","hash":"6407a12affae3af972fa14f3e71625bcd1d058af","modified":1573455436124},{"_id":"themes/miho/_source/about/index.md","hash":"e23142c5eea57af6304413b2cf69d85826afbc72","modified":1573455436155},{"_id":"themes/miho/_source/blog/installation-configuration.md","hash":"b31df05ea1544a1e99e50693ef4b60b850f3bae2","modified":1573455436156},{"_id":"themes/miho/layout/_partial/after-footer.ejs","hash":"f290090679cd7393b713b7bb5440e200eab5e1ce","modified":1573455436162},{"_id":"themes/miho/layout/_partial/archive-post.ejs","hash":"38bb2d96e64aad408ce5245cac8a43bc83995839","modified":1573455436162},{"_id":"themes/miho/layout/_partial/archive.ejs","hash":"2deeffb3851eee9594088a9e20325fb041e3006c","modified":1573455436163},{"_id":"themes/miho/layout/_partial/article.ejs","hash":"c904d9cb2cab7fddc0e038ebfb18ac42679e56e8","modified":1573455436164},{"_id":"themes/miho/layout/_partial/footer.ejs","hash":"92ea5853a08c785ce0952594df4531da0544c7f2","modified":1573459165358},{"_id":"themes/miho/layout/_partial/head.ejs","hash":"412b063af00401aa2647e5ec9c30c3a961db144b","modified":1573455436165},{"_id":"themes/miho/layout/_partial/header.ejs","hash":"9f03288d4a29e9a4fd7400540e7ff9c1dcbbb22e","modified":1573455436166},{"_id":"themes/miho/layout/_partial/mobile-nav.ejs","hash":"97d02977ed2fa70dde4b25deb87d1b12e5e58301","modified":1573455436167},{"_id":"themes/miho/layout/_partial/search.ejs","hash":"b7e2df6a7ca6c6d2d26039cb10c1e92480000e7f","modified":1573455436181},{"_id":"themes/miho/layout/_partial/sidebar.ejs","hash":"e321e88ea82474f51ea031846b8e42c216f0a0b4","modified":1573455436181},{"_id":"themes/miho/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1573455436182},{"_id":"themes/miho/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1573455436183},{"_id":"themes/miho/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1573455436183},{"_id":"themes/miho/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1573455436184},{"_id":"themes/miho/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1573455436184},{"_id":"themes/miho/source/css/_extend.styl","hash":"7506d6eca9c34029817b90ebcbfe0398cf49a0d8","modified":1573455436190},{"_id":"themes/miho/source/css/_variables.styl","hash":"00f67e78896e78ce9e498beaf485c4091e60f777","modified":1573455436203},{"_id":"themes/miho/source/css/style.styl","hash":"2b4e7bf607e7d3429d77014c46acdb15aa3309ad","modified":1573455436211},{"_id":"themes/miho/source/images/alipay.png","hash":"b3f9db844b1e522fc55125302f2979f50a6d0529","modified":1573455436213},{"_id":"themes/miho/source/images/alipay_code.jpg","hash":"3b328818714af7fbf7b20748d783c861d876fd5b","modified":1573455436214},{"_id":"themes/miho/source/images/avatar.jpg","hash":"38a5900ab7428332136bd50d752b506bee948c2d","modified":1573455973135},{"_id":"themes/miho/source/images/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1573455436217},{"_id":"themes/miho/source/images/wechat.png","hash":"8de97bf5bb3f3a0845e02172f79d6bba2fb6bb3b","modified":1573455436218},{"_id":"themes/miho/source/images/wechat_code.jpg","hash":"4a5d67c6aed4a266ab0ddac7488361cfa01cf694","modified":1573455436219},{"_id":"themes/miho/source/js/animate.js","hash":"c9776b5e345e00b020261220518a472e8d61b61c","modified":1573455436220},{"_id":"themes/miho/source/js/main.js","hash":"bdd264350095f87aca9a4105c64ecf462f90ad20","modified":1573455436221},{"_id":"themes/miho/source/js/pace.min.js","hash":"64759f14e0f92d62df57eb752f1745a16aba93ce","modified":1573455436221},{"_id":"themes/miho/source/js/particles.js","hash":"b71ddbfc4b1775585bc0632306db4ddc9bd004d4","modified":1573455436222},{"_id":"themes/miho/source/js/pop-img.js","hash":"5d0ff39a25cc37276ca3a16912ee2bff1a6e4667","modified":1573455436223},{"_id":"themes/miho/source/js/search.js","hash":"638af875aabf0b8a5a318380f9220c4da682831f","modified":1573455436224},{"_id":"themes/miho/source/images/banner.jpg","hash":"e1d7853fb02b68ee6adcc2d9b3ca647bc802e9a9","modified":1573455436215},{"_id":"themes/miho/.git/objects/pack/pack-ea750ca33b25965d7b136744215c56b013f989c5.idx","hash":"62a0b89f728da197082074c662389b741c448864","modified":1573455436070},{"_id":"themes/miho/.git/refs/heads/master","hash":"467b8aedadf804fc63447ccd03018dcd9bc90e60","modified":1573455436124},{"_id":"themes/miho/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1573455436174},{"_id":"themes/miho/layout/_partial/post/copyright.ejs","hash":"ae7bde3e9e1e5660f163ff6cf77da846fe0595f3","modified":1573462063341},{"_id":"themes/miho/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1573455436175},{"_id":"themes/miho/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1573455436176},{"_id":"themes/miho/layout/_partial/post/nav.ejs","hash":"e99ca2902c980013cd19e859afe64c7bd3cc176d","modified":1573455436176},{"_id":"themes/miho/layout/_partial/post/reward.ejs","hash":"f82c4eb8fe0439c29cef1ec33c88314257ed4528","modified":1573455436177},{"_id":"themes/miho/layout/_partial/post/share.ejs","hash":"b58e4c1f28d2430c6b992b434a6dc0cdf80f75a1","modified":1573455436178},{"_id":"themes/miho/layout/_partial/post/tag.ejs","hash":"9ed9626100a8500ab76ef398c0efad02f0db99e3","modified":1573455436178},{"_id":"themes/miho/layout/_partial/post/title.ejs","hash":"577659dc67c89ef0a45dae5d715f20f4a48f8c6a","modified":1573455436179},{"_id":"themes/miho/layout/_partial/post/toc.ejs","hash":"2eaf42847685517d3a80fd6263478540c8ab1e82","modified":1573455436180},{"_id":"themes/miho/source/css/_partial/archive.styl","hash":"b24ada27c79e6cdb4c7ef1b53bf133bd5b12da60","modified":1573455436191},{"_id":"themes/miho/source/css/_partial/article.styl","hash":"0e90c0f0d506395d1fd4e8c47b79a3a9fafacb97","modified":1573455436192},{"_id":"themes/miho/source/css/_partial/comment.styl","hash":"15b4a3dec7b6d4292efd8766659a3d2d3dbe0e64","modified":1573455436192},{"_id":"themes/miho/source/css/_partial/footer.styl","hash":"7bd980e4507e6a1a0b8d788a4be86fa307bd0ef9","modified":1573455436193},{"_id":"themes/miho/source/css/_partial/header.styl","hash":"963689b617d51617cdac681a91f38f569c59e901","modified":1573455436194},{"_id":"themes/miho/source/css/_partial/highlight.styl","hash":"d653170143c1b1a60cf00ce064c49361de8c95ec","modified":1573455436195},{"_id":"themes/miho/source/css/_partial/mobile.styl","hash":"96e410dc5143e6d3afbcb4eae20cf9faf11b489f","modified":1573455436195},{"_id":"themes/miho/source/css/_partial/pace.styl","hash":"2efcfd53aff0edf29ca1ed83dc3dbe38cffb0fdd","modified":1573455436196},{"_id":"themes/miho/source/css/_partial/post.styl","hash":"d251e92518efe460c1d7d1d85fbfce63515207a3","modified":1573455436197},{"_id":"themes/miho/source/css/_partial/reward.styl","hash":"e2e240eadeeca82339fe75e84c26c9b0853c9404","modified":1573455436197},{"_id":"themes/miho/source/css/_partial/scroll.styl","hash":"df80c3dbfd3db3b17c297d80957c9f8feeed3180","modified":1573455436198},{"_id":"themes/miho/source/css/_partial/share.styl","hash":"e5ba469a164cefbf538e9e4cabeb432982924690","modified":1573455436198},{"_id":"themes/miho/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1573455436199},{"_id":"themes/miho/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1573455436200},{"_id":"themes/miho/source/css/_partial/sidebar.styl","hash":"895b4a6235cb8781de6b7beb40657b961ad170d8","modified":1573455436201},{"_id":"themes/miho/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1573455436201},{"_id":"themes/miho/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1573455436202},{"_id":"themes/miho/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1573455436204},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1573455436206},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1573455436211},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1573455436210},{"_id":"themes/miho/.git/logs/refs/heads/master","hash":"6407a12affae3af972fa14f3e71625bcd1d058af","modified":1573455436125},{"_id":"themes/miho/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1573455436120},{"_id":"themes/miho/layout/_partial/plugins/analytics/baidu-analytics.ejs","hash":"e72a08ad3f7b43e7e9f09b005523cdc2f38356ac","modified":1573455436168},{"_id":"themes/miho/layout/_partial/plugins/analytics/cnzz-analytics.ejs","hash":"73d033c49c67edbcb76e1fd0d2a0c6e8da35d21f","modified":1573455436168},{"_id":"themes/miho/layout/_partial/plugins/analytics/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1573455436169},{"_id":"themes/miho/layout/_partial/plugins/comments/changyan.ejs","hash":"f63a8e1d504323414c3f57b706587484af8a4782","modified":1573455436170},{"_id":"themes/miho/layout/_partial/plugins/comments/gitment.ejs","hash":"95c98866008180376022bc1a3c7a6cb2c2ed62b7","modified":1573455436171},{"_id":"themes/miho/layout/_partial/plugins/comments/wangyiyun.ejs","hash":"d293bd3c5888501efd1f6c96a7e10756bdfe8ccc","modified":1573455436171},{"_id":"themes/miho/layout/_partial/plugins/comments/youyan.ejs","hash":"d49afa528a4db04355ec0d1cff8fe4a0a005410f","modified":1573455436172},{"_id":"themes/miho/layout/_partial/plugins/sites/visit.ejs","hash":"bb1df834bb2f0501ce7fc1acb57e054732e6f9cb","modified":1573455436173},{"_id":"themes/miho/.git/logs/refs/remotes/origin/HEAD","hash":"6407a12affae3af972fa14f3e71625bcd1d058af","modified":1573455436119},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1573455436208},{"_id":"themes/miho/.git/objects/pack/pack-ea750ca33b25965d7b136744215c56b013f989c5.pack","hash":"1666b66c45f7c2c4075ceae167a27541f90631fc","modified":1573455436070}],"Category":[{"name":"环境安装","_id":"ck2vnu8k70006zwu6h45td0hb"},{"name":"博客搭建","_id":"ck2vnu8kh000czwu6g3yj6vsf"}],"Data":[],"Page":[{"title":"404 Not Found","date":"2019-09-22T02:41:27.000Z","_content":"\n<center>\n对不起，您所访问的页面不存在或者已删除。\n您可以<a href=\"https://blog.nightteam.cn>\">点击此处</a>返回首页。\n</center>\n\n<blockquote class=\"blockquote-center\">\n    Franplk\n</blockquote>","source":"404.md","raw":"---\ntitle: 404 Not Found\ndate: 2019-09-22 10:41:27\n---\n\n<center>\n对不起，您所访问的页面不存在或者已删除。\n您可以<a href=\"https://blog.nightteam.cn>\">点击此处</a>返回首页。\n</center>\n\n<blockquote class=\"blockquote-center\">\n    Franplk\n</blockquote>","updated":"2019-11-08T13:20:41.673Z","path":"404.html","comments":1,"layout":"page","_id":"ck2vnu8iv0000zwu679lu9fko","content":"<center>\n对不起，您所访问的页面不存在或者已删除。\n您可以<a href=\"https://blog.nightteam.cn>\" target=\"_blank\" rel=\"noopener\">点击此处</a>返回首页。\n</center>\n\n<blockquote class=\"blockquote-center\">\n    Franplk\n</blockquote>","site":{"data":{}},"excerpt":"","more":"<center>\n对不起，您所访问的页面不存在或者已删除。\n您可以<a href=\"https://blog.nightteam.cn>\" target=\"_blank\" rel=\"noopener\">点击此处</a>返回首页。\n</center>\n\n<blockquote class=\"blockquote-center\">\n    Franplk\n</blockquote>"},{"_content":"个人博客系统","source":"README.md","raw":"个人博客系统","date":"2019-11-11T09:02:10.763Z","updated":"2019-11-11T09:02:10.763Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"ck2vnu8iz0001zwu66k0l81bv","content":"<p>个人博客系统</p>\n","site":{"data":{}},"excerpt":"","more":"<p>个人博客系统</p>\n"},{"_content":"### 关于我\n从事 Python开发，有一定的代码洁癖。\n\n使用 `Flask`框架进行Web开发；使用pandas进行数据分析。\n\n对机器学习有浓厚的兴趣，使用sk-learn进行分类模型构建。\n\n对`前端`、`后端`、`数据分析`等技能均有所涉猎。\n\n热爱`开源项目`、热爱`新技术`、热爱`新事物`。\n\n\n\n### 关于工作\n\n城市：`北京`\n### 关于学习\n喜欢学习新东西...\n目前正在学习方向：`Python Flask`开发，`NLP`方向，`机器学习`方向\n\n### 关于座右铭\n> 欲为大树，何须与草争！\n\n### 关于爱好\n热爱`运动`，喜爱`围棋`、`阅读`、`旅行`。\n### 联系我\n* Email: franplk@126.com\n* GitHub: [Franplk](https://github.com/franplk)\n","source":"about/index.md","raw":"### 关于我\n从事 Python开发，有一定的代码洁癖。\n\n使用 `Flask`框架进行Web开发；使用pandas进行数据分析。\n\n对机器学习有浓厚的兴趣，使用sk-learn进行分类模型构建。\n\n对`前端`、`后端`、`数据分析`等技能均有所涉猎。\n\n热爱`开源项目`、热爱`新技术`、热爱`新事物`。\n\n\n\n### 关于工作\n\n城市：`北京`\n### 关于学习\n喜欢学习新东西...\n目前正在学习方向：`Python Flask`开发，`NLP`方向，`机器学习`方向\n\n### 关于座右铭\n> 欲为大树，何须与草争！\n\n### 关于爱好\n热爱`运动`，喜爱`围棋`、`阅读`、`旅行`。\n### 联系我\n* Email: franplk@126.com\n* GitHub: [Franplk](https://github.com/franplk)\n","date":"2019-11-11T08:38:28.476Z","updated":"2019-11-11T08:38:28.476Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"ck2vnu8k20003zwu671ch3156","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>从事 Python开发，有一定的代码洁癖。</p>\n<p>使用 <code>Flask</code>框架进行Web开发；使用pandas进行数据分析。</p>\n<p>对机器学习有浓厚的兴趣，使用sk-learn进行分类模型构建。</p>\n<p>对<code>前端</code>、<code>后端</code>、<code>数据分析</code>等技能均有所涉猎。</p>\n<p>热爱<code>开源项目</code>、热爱<code>新技术</code>、热爱<code>新事物</code>。</p>\n<h3 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h3><p>城市：<code>北京</code></p>\n<h3 id=\"关于学习\"><a href=\"#关于学习\" class=\"headerlink\" title=\"关于学习\"></a>关于学习</h3><p>喜欢学习新东西…<br>目前正在学习方向：<code>Python Flask</code>开发，<code>NLP</code>方向，<code>机器学习</code>方向</p>\n<h3 id=\"关于座右铭\"><a href=\"#关于座右铭\" class=\"headerlink\" title=\"关于座右铭\"></a>关于座右铭</h3><blockquote>\n<p>欲为大树，何须与草争！</p>\n</blockquote>\n<h3 id=\"关于爱好\"><a href=\"#关于爱好\" class=\"headerlink\" title=\"关于爱好\"></a>关于爱好</h3><p>热爱<code>运动</code>，喜爱<code>围棋</code>、<code>阅读</code>、<code>旅行</code>。</p>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><ul>\n<li>Email: <a href=\"mailto:franplk@126.com\" target=\"_blank\" rel=\"noopener\">franplk@126.com</a></li>\n<li>GitHub: <a href=\"https://github.com/franplk\" target=\"_blank\" rel=\"noopener\">Franplk</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>从事 Python开发，有一定的代码洁癖。</p>\n<p>使用 <code>Flask</code>框架进行Web开发；使用pandas进行数据分析。</p>\n<p>对机器学习有浓厚的兴趣，使用sk-learn进行分类模型构建。</p>\n<p>对<code>前端</code>、<code>后端</code>、<code>数据分析</code>等技能均有所涉猎。</p>\n<p>热爱<code>开源项目</code>、热爱<code>新技术</code>、热爱<code>新事物</code>。</p>\n<h3 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h3><p>城市：<code>北京</code></p>\n<h3 id=\"关于学习\"><a href=\"#关于学习\" class=\"headerlink\" title=\"关于学习\"></a>关于学习</h3><p>喜欢学习新东西…<br>目前正在学习方向：<code>Python Flask</code>开发，<code>NLP</code>方向，<code>机器学习</code>方向</p>\n<h3 id=\"关于座右铭\"><a href=\"#关于座右铭\" class=\"headerlink\" title=\"关于座右铭\"></a>关于座右铭</h3><blockquote>\n<p>欲为大树，何须与草争！</p>\n</blockquote>\n<h3 id=\"关于爱好\"><a href=\"#关于爱好\" class=\"headerlink\" title=\"关于爱好\"></a>关于爱好</h3><p>热爱<code>运动</code>，喜爱<code>围棋</code>、<code>阅读</code>、<code>旅行</code>。</p>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><ul>\n<li>Email: <a href=\"mailto:franplk@126.com\" target=\"_blank\" rel=\"noopener\">franplk@126.com</a></li>\n<li>GitHub: <a href=\"https://github.com/franplk\" target=\"_blank\" rel=\"noopener\">Franplk</a></li>\n</ul>\n"},{"title":"文章分类","date":"2019-11-08T13:05:00.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2019-11-08 21:05:00\ntype: categories\ncomments: false\n---\n","updated":"2019-11-11T06:38:49.838Z","path":"categories/index.html","layout":"page","_id":"ck2vnu8k50005zwu6en89ecfk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-11-08T12:56:58.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-11-08 20:56:58\ntype: tags\ncomments: false\n---\n","updated":"2019-11-08T13:10:30.071Z","path":"tags/index.html","layout":"page","_id":"ck2vnu8kc0009zwu6e7fo67q9","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Docker环境安装","date":"2019-11-09T08:50:51.000Z","cover_picture":"/images/avatar.jpg","_content":"\n Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。 \n\n<!-- more -->\n\n本文介绍了Docker的简单安装部署，以及几个简单命令操作\n\n### 在线安装\n\n不同的操作系统安装命令不一致\n\n1. centos命令\n\n   ```\n   # -y 指定免交互安装\n   $ sudo yum –y install docker-ce\n   ```\n\n2. ubuntu命令\n\n   ```\n   # 安装最新版Docker\n   $ sudo apt-get install docker-ce\n   ```\n\n### 二进制安装 -- 适用离线\n\n二进制安装方式适合服务器无法连接外网的环境。\n\n1. 准备二进制文件\n\n   ```\n   官网下载稳定版，根据操作系统选择适合的版本\n   下载地址：https://download.docker.com/linux/static/stable/x86_64/\n   ```\n\n2. 解压文件并转移文件\n\n   ```\n   # 解压文件\n   $ tar –zxf docker-19.03.2.tgz\n   # 移动文件\n   # 将加压后文件夹的所有内容移动到某个系统环境变量下\n   # 比如：/bin, usr/bin，usr/local/bin\n   $ sudo cp docker/* /usr/bin/\n   ```\n\n3. 启动docker服务\n\n   ```\n   # 启动Docker服务\n   # & 表示后台运行\n   $ sudo dockerd &\n   ```\n\n4. 验证安装成功\n\n   ```\n   # 方式一：查看docker版本信息\n   $ sudo docker version\n   # 方式二：查看docker信息\n   $ sudo docker info\n   ```\n\n### Docker基本操作\n\n1. 应用启动\n\n   ```\n   # 创建新容器---交互模式\n   # 该方式用于改造镜像，生成新镜像（Dockerfile操作）\n   $ docker run -it image_id /bin/bash\n   \n   # 创建新容器 --- 后台运行\n   # 用于启动新的应用\n   # -d 指定daemon模式\n   # -p 指定映射端口\n   # --name 指定新创建的容器的名称\n   $ docker run -d -p po:pi --name c_name image_id\n   ```\n\n2. 应用查看\n\n   ```\n   # 查看运行中的容器 -a 表示所有容器，包括停止的容器\n   $ docker ps -a\n   \n   # 交互模式进入容器，可以做一些操作，比如查看日志等\n   # container_id 容器的ID\n   # command 进入后执行的命令，一般设置为 /bin/bash\n   $ docker exec container_id command\n   ```\n\n3. 应用停止/恢复\n\n   ```\n   # 应用停止\n   # -t 指定等待多长时间(单位：s)后推出\n   $ sudo docker stop -t 60 container_id\n   \n   # 应用恢复\n   $ sudo docker restart container_id\n   ```\n\n   ","source":"_posts/docker.md","raw":"---\ntitle: Docker环境安装\ndate: 2019-11-09 16:50:51\ntags:\n  - Docker\ncategories:\n  - 环境安装\ncover_picture: /images/avatar.jpg\n---\n\n Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。 \n\n<!-- more -->\n\n本文介绍了Docker的简单安装部署，以及几个简单命令操作\n\n### 在线安装\n\n不同的操作系统安装命令不一致\n\n1. centos命令\n\n   ```\n   # -y 指定免交互安装\n   $ sudo yum –y install docker-ce\n   ```\n\n2. ubuntu命令\n\n   ```\n   # 安装最新版Docker\n   $ sudo apt-get install docker-ce\n   ```\n\n### 二进制安装 -- 适用离线\n\n二进制安装方式适合服务器无法连接外网的环境。\n\n1. 准备二进制文件\n\n   ```\n   官网下载稳定版，根据操作系统选择适合的版本\n   下载地址：https://download.docker.com/linux/static/stable/x86_64/\n   ```\n\n2. 解压文件并转移文件\n\n   ```\n   # 解压文件\n   $ tar –zxf docker-19.03.2.tgz\n   # 移动文件\n   # 将加压后文件夹的所有内容移动到某个系统环境变量下\n   # 比如：/bin, usr/bin，usr/local/bin\n   $ sudo cp docker/* /usr/bin/\n   ```\n\n3. 启动docker服务\n\n   ```\n   # 启动Docker服务\n   # & 表示后台运行\n   $ sudo dockerd &\n   ```\n\n4. 验证安装成功\n\n   ```\n   # 方式一：查看docker版本信息\n   $ sudo docker version\n   # 方式二：查看docker信息\n   $ sudo docker info\n   ```\n\n### Docker基本操作\n\n1. 应用启动\n\n   ```\n   # 创建新容器---交互模式\n   # 该方式用于改造镜像，生成新镜像（Dockerfile操作）\n   $ docker run -it image_id /bin/bash\n   \n   # 创建新容器 --- 后台运行\n   # 用于启动新的应用\n   # -d 指定daemon模式\n   # -p 指定映射端口\n   # --name 指定新创建的容器的名称\n   $ docker run -d -p po:pi --name c_name image_id\n   ```\n\n2. 应用查看\n\n   ```\n   # 查看运行中的容器 -a 表示所有容器，包括停止的容器\n   $ docker ps -a\n   \n   # 交互模式进入容器，可以做一些操作，比如查看日志等\n   # container_id 容器的ID\n   # command 进入后执行的命令，一般设置为 /bin/bash\n   $ docker exec container_id command\n   ```\n\n3. 应用停止/恢复\n\n   ```\n   # 应用停止\n   # -t 指定等待多长时间(单位：s)后推出\n   $ sudo docker stop -t 60 container_id\n   \n   # 应用恢复\n   $ sudo docker restart container_id\n   ```\n\n   ","slug":"docker","published":1,"updated":"2019-11-11T07:54:35.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vnu8jz0002zwu66e6s1ace","content":"<p> Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。 </p>\n<a id=\"more\"></a>\n\n<p>本文介绍了Docker的简单安装部署，以及几个简单命令操作</p>\n<h3 id=\"在线安装\"><a href=\"#在线安装\" class=\"headerlink\" title=\"在线安装\"></a>在线安装</h3><p>不同的操作系统安装命令不一致</p>\n<ol>\n<li><p>centos命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -y 指定免交互安装</span><br><span class=\"line\">$ sudo yum –y install docker-ce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ubuntu命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装最新版Docker</span><br><span class=\"line\">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"二进制安装-–-适用离线\"><a href=\"#二进制安装-–-适用离线\" class=\"headerlink\" title=\"二进制安装 – 适用离线\"></a>二进制安装 – 适用离线</h3><p>二进制安装方式适合服务器无法连接外网的环境。</p>\n<ol>\n<li><p>准备二进制文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官网下载稳定版，根据操作系统选择适合的版本</span><br><span class=\"line\">下载地址：https://download.docker.com/linux/static/stable/x86_64/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压文件并转移文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压文件</span><br><span class=\"line\">$ tar –zxf docker-19.03.2.tgz</span><br><span class=\"line\"># 移动文件</span><br><span class=\"line\"># 将加压后文件夹的所有内容移动到某个系统环境变量下</span><br><span class=\"line\"># 比如：/bin, usr/bin，usr/local/bin</span><br><span class=\"line\">$ sudo cp docker/* /usr/bin/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动docker服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动Docker服务</span><br><span class=\"line\"># &amp; 表示后台运行</span><br><span class=\"line\">$ sudo dockerd &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 方式一：查看docker版本信息</span><br><span class=\"line\">$ sudo docker version</span><br><span class=\"line\"># 方式二：查看docker信息</span><br><span class=\"line\">$ sudo docker info</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"Docker基本操作\"><a href=\"#Docker基本操作\" class=\"headerlink\" title=\"Docker基本操作\"></a>Docker基本操作</h3><ol>\n<li><p>应用启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建新容器---交互模式</span><br><span class=\"line\"># 该方式用于改造镜像，生成新镜像（Dockerfile操作）</span><br><span class=\"line\">$ docker run -it image_id /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建新容器 --- 后台运行</span><br><span class=\"line\"># 用于启动新的应用</span><br><span class=\"line\"># -d 指定daemon模式</span><br><span class=\"line\"># -p 指定映射端口</span><br><span class=\"line\"># --name 指定新创建的容器的名称</span><br><span class=\"line\">$ docker run -d -p po:pi --name c_name image_id</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应用查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看运行中的容器 -a 表示所有容器，包括停止的容器</span><br><span class=\"line\">$ docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 交互模式进入容器，可以做一些操作，比如查看日志等</span><br><span class=\"line\"># container_id 容器的ID</span><br><span class=\"line\"># command 进入后执行的命令，一般设置为 /bin/bash</span><br><span class=\"line\">$ docker exec container_id command</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应用停止/恢复</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 应用停止</span><br><span class=\"line\"># -t 指定等待多长时间(单位：s)后推出</span><br><span class=\"line\">$ sudo docker stop -t 60 container_id</span><br><span class=\"line\"></span><br><span class=\"line\"># 应用恢复</span><br><span class=\"line\">$ sudo docker restart container_id</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p> Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。 </p>","more":"<p>本文介绍了Docker的简单安装部署，以及几个简单命令操作</p>\n<h3 id=\"在线安装\"><a href=\"#在线安装\" class=\"headerlink\" title=\"在线安装\"></a>在线安装</h3><p>不同的操作系统安装命令不一致</p>\n<ol>\n<li><p>centos命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -y 指定免交互安装</span><br><span class=\"line\">$ sudo yum –y install docker-ce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ubuntu命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装最新版Docker</span><br><span class=\"line\">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"二进制安装-–-适用离线\"><a href=\"#二进制安装-–-适用离线\" class=\"headerlink\" title=\"二进制安装 – 适用离线\"></a>二进制安装 – 适用离线</h3><p>二进制安装方式适合服务器无法连接外网的环境。</p>\n<ol>\n<li><p>准备二进制文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官网下载稳定版，根据操作系统选择适合的版本</span><br><span class=\"line\">下载地址：https://download.docker.com/linux/static/stable/x86_64/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压文件并转移文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压文件</span><br><span class=\"line\">$ tar –zxf docker-19.03.2.tgz</span><br><span class=\"line\"># 移动文件</span><br><span class=\"line\"># 将加压后文件夹的所有内容移动到某个系统环境变量下</span><br><span class=\"line\"># 比如：/bin, usr/bin，usr/local/bin</span><br><span class=\"line\">$ sudo cp docker/* /usr/bin/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动docker服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动Docker服务</span><br><span class=\"line\"># &amp; 表示后台运行</span><br><span class=\"line\">$ sudo dockerd &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 方式一：查看docker版本信息</span><br><span class=\"line\">$ sudo docker version</span><br><span class=\"line\"># 方式二：查看docker信息</span><br><span class=\"line\">$ sudo docker info</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"Docker基本操作\"><a href=\"#Docker基本操作\" class=\"headerlink\" title=\"Docker基本操作\"></a>Docker基本操作</h3><ol>\n<li><p>应用启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建新容器---交互模式</span><br><span class=\"line\"># 该方式用于改造镜像，生成新镜像（Dockerfile操作）</span><br><span class=\"line\">$ docker run -it image_id /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建新容器 --- 后台运行</span><br><span class=\"line\"># 用于启动新的应用</span><br><span class=\"line\"># -d 指定daemon模式</span><br><span class=\"line\"># -p 指定映射端口</span><br><span class=\"line\"># --name 指定新创建的容器的名称</span><br><span class=\"line\">$ docker run -d -p po:pi --name c_name image_id</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应用查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看运行中的容器 -a 表示所有容器，包括停止的容器</span><br><span class=\"line\">$ docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 交互模式进入容器，可以做一些操作，比如查看日志等</span><br><span class=\"line\"># container_id 容器的ID</span><br><span class=\"line\"># command 进入后执行的命令，一般设置为 /bin/bash</span><br><span class=\"line\">$ docker exec container_id command</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应用停止/恢复</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 应用停止</span><br><span class=\"line\"># -t 指定等待多长时间(单位：s)后推出</span><br><span class=\"line\">$ sudo docker stop -t 60 container_id</span><br><span class=\"line\"></span><br><span class=\"line\"># 应用恢复</span><br><span class=\"line\">$ sudo docker restart container_id</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>"},{"title":"hexo_blog","date":"2019-11-12T08:30:04.000Z","_content":"\n\n\n\n\n本文分享一篇博客搭建文章，介绍了如何使用Hexo博客框架搭建个人博客。\n\n\n\n### Github配置\n\n1. Github账号\n\n   首先，需要自己有一个Github账号，没有的话去GIthub官网注册一个即可。\n\n   搭建博客需要一个域名（无需自己申请），GitHub 为我们提供了的GitHub Pages 功能，自动为我们提供一个以Github用户名为前缀的域名：{username}.github.io。 \n\n   \n\n2. 设置GitHub SSH key\n\n   设置GIthub SSH key是为了在站点部署代码时，可以通过Hexo命令直接提交代码。如果不设置SSH Key，后期也可以使用\"Https\"方式的 git 仓库地址，不过该方式会弹出输入用户名和密码的界面。该方式适合在windos下的部署，在linux下会有问题。\n\n   \n\n3. 创建仓库作为我们的站点代码库\n\n   在Github上创建一个仓库，仓库的名称必须为：{username}.github.io。比如你的Github账号为apple，则新建的仓库名称为：apple.github.io. \n\n   \n\n###  环境准备\n\n1. 安装NodeJS\n\n   首先在个人电脑上安装NodeJS，下载地址为： [ NodeJs下载地址](https://nodejs.org/zh-cn/download/)\n\n   安装完毕后，验证一下 npm 命令是否可以使用，以确保NodeJS安装成功。\n\n2. 安装Hexo\n\n   NodeJS安装完成后，通过npm命令进行 Hexo的安装。Hexo是一个博客框架，帮助我们快速搭建个人博客，Hexo为我们提供一个NodeJS的客户端命令行工具，用于Hexo项目的创建，页面新建，代码编译以及部署等功能。执行以下命令进行安装：\n\n   ```\n   # -g 选项指定全局安装\n   npm install -g hexo-cli\n   ```\n\n\n\n### 博客项目搭建\n\n1. 初始化项目\n\n   进入到项目创建目录（比如，E:\\develop）执行以下命令，初始化项目：\n\n   ```\n   # 其中blog_name是博客名称，需要设定\n   hexo init {blog_name}\n   ```\n\n   比如我的博客名称为 \"myblog\"，可以执行以下命令来初始化项目：\n\n   ```\n   hexo init myblog\n   ```\n\n   此时，会在当前目录下面生成myblog文件夹，该文件夹下面包含以下文件：\n\n   - myblog\n     - scaffolds : 生成博客文章的模板文件目录\n     - source : 博客源码目录\n     - themes：主题目录，后期下载的主题都可以放在该目录下\n       - landscape 主题，Hexo默认提供的主题\n     - _config.yml ：博客配置文件\n\n   这样一个初始化的博客已经建立完成，默认提供了一篇文章，后面先发布成功后，再添加个人的文章。\n\n2. 代码编译\n\n   执行以下命令：\n\n   ```\n   hexo generate\n   ```\n\n   或者简写为如下命令：\n\n   ```\n   hexo g\n   ```\n\n   \n\n3. 启动服务\n\n4. 部署到Github","source":"_posts/hexo-blog.md","raw":"---\ntitle: hexo_blog\ndate: 2019-11-12 16:30:04\ntags: Hexo\ncategories: 博客搭建\n---\n\n\n\n\n\n本文分享一篇博客搭建文章，介绍了如何使用Hexo博客框架搭建个人博客。\n\n\n\n### Github配置\n\n1. Github账号\n\n   首先，需要自己有一个Github账号，没有的话去GIthub官网注册一个即可。\n\n   搭建博客需要一个域名（无需自己申请），GitHub 为我们提供了的GitHub Pages 功能，自动为我们提供一个以Github用户名为前缀的域名：{username}.github.io。 \n\n   \n\n2. 设置GitHub SSH key\n\n   设置GIthub SSH key是为了在站点部署代码时，可以通过Hexo命令直接提交代码。如果不设置SSH Key，后期也可以使用\"Https\"方式的 git 仓库地址，不过该方式会弹出输入用户名和密码的界面。该方式适合在windos下的部署，在linux下会有问题。\n\n   \n\n3. 创建仓库作为我们的站点代码库\n\n   在Github上创建一个仓库，仓库的名称必须为：{username}.github.io。比如你的Github账号为apple，则新建的仓库名称为：apple.github.io. \n\n   \n\n###  环境准备\n\n1. 安装NodeJS\n\n   首先在个人电脑上安装NodeJS，下载地址为： [ NodeJs下载地址](https://nodejs.org/zh-cn/download/)\n\n   安装完毕后，验证一下 npm 命令是否可以使用，以确保NodeJS安装成功。\n\n2. 安装Hexo\n\n   NodeJS安装完成后，通过npm命令进行 Hexo的安装。Hexo是一个博客框架，帮助我们快速搭建个人博客，Hexo为我们提供一个NodeJS的客户端命令行工具，用于Hexo项目的创建，页面新建，代码编译以及部署等功能。执行以下命令进行安装：\n\n   ```\n   # -g 选项指定全局安装\n   npm install -g hexo-cli\n   ```\n\n\n\n### 博客项目搭建\n\n1. 初始化项目\n\n   进入到项目创建目录（比如，E:\\develop）执行以下命令，初始化项目：\n\n   ```\n   # 其中blog_name是博客名称，需要设定\n   hexo init {blog_name}\n   ```\n\n   比如我的博客名称为 \"myblog\"，可以执行以下命令来初始化项目：\n\n   ```\n   hexo init myblog\n   ```\n\n   此时，会在当前目录下面生成myblog文件夹，该文件夹下面包含以下文件：\n\n   - myblog\n     - scaffolds : 生成博客文章的模板文件目录\n     - source : 博客源码目录\n     - themes：主题目录，后期下载的主题都可以放在该目录下\n       - landscape 主题，Hexo默认提供的主题\n     - _config.yml ：博客配置文件\n\n   这样一个初始化的博客已经建立完成，默认提供了一篇文章，后面先发布成功后，再添加个人的文章。\n\n2. 代码编译\n\n   执行以下命令：\n\n   ```\n   hexo generate\n   ```\n\n   或者简写为如下命令：\n\n   ```\n   hexo g\n   ```\n\n   \n\n3. 启动服务\n\n4. 部署到Github","slug":"hexo-blog","published":1,"updated":"2019-11-12T09:33:58.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vnu8k40004zwu6dsbt3ksh","content":"<p>本文分享一篇博客搭建文章，介绍了如何使用Hexo博客框架搭建个人博客。</p>\n<h3 id=\"Github配置\"><a href=\"#Github配置\" class=\"headerlink\" title=\"Github配置\"></a>Github配置</h3><ol>\n<li><p>Github账号</p>\n<p>首先，需要自己有一个Github账号，没有的话去GIthub官网注册一个即可。</p>\n<p>搭建博客需要一个域名（无需自己申请），GitHub 为我们提供了的GitHub Pages 功能，自动为我们提供一个以Github用户名为前缀的域名：{username}.github.io。 </p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>设置GitHub SSH key</p>\n<p>设置GIthub SSH key是为了在站点部署代码时，可以通过Hexo命令直接提交代码。如果不设置SSH Key，后期也可以使用”Https”方式的 git 仓库地址，不过该方式会弹出输入用户名和密码的界面。该方式适合在windos下的部署，在linux下会有问题。</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>创建仓库作为我们的站点代码库</p>\n<p>在Github上创建一个仓库，仓库的名称必须为：{username}.github.io。比如你的Github账号为apple，则新建的仓库名称为：apple.github.io. </p>\n</li>\n</ol>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ol>\n<li><p>安装NodeJS</p>\n<p>首先在个人电脑上安装NodeJS，下载地址为： <a href=\"https://nodejs.org/zh-cn/download/\" target=\"_blank\" rel=\"noopener\"> NodeJs下载地址</a></p>\n<p>安装完毕后，验证一下 npm 命令是否可以使用，以确保NodeJS安装成功。</p>\n</li>\n<li><p>安装Hexo</p>\n<p>NodeJS安装完成后，通过npm命令进行 Hexo的安装。Hexo是一个博客框架，帮助我们快速搭建个人博客，Hexo为我们提供一个NodeJS的客户端命令行工具，用于Hexo项目的创建，页面新建，代码编译以及部署等功能。执行以下命令进行安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -g 选项指定全局安装</span><br><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h3 id=\"博客项目搭建\"><a href=\"#博客项目搭建\" class=\"headerlink\" title=\"博客项目搭建\"></a>博客项目搭建</h3><ol>\n<li><p>初始化项目</p>\n<p>进入到项目创建目录（比如，E:\\develop）执行以下命令，初始化项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 其中blog_name是博客名称，需要设定</span><br><span class=\"line\">hexo init &#123;blog_name&#125;</span><br></pre></td></tr></table></figure>\n\n<p>比如我的博客名称为 “myblog”，可以执行以下命令来初始化项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myblog</span><br></pre></td></tr></table></figure>\n\n<p>此时，会在当前目录下面生成myblog文件夹，该文件夹下面包含以下文件：</p>\n<ul>\n<li>myblog<ul>\n<li>scaffolds : 生成博客文章的模板文件目录</li>\n<li>source : 博客源码目录</li>\n<li>themes：主题目录，后期下载的主题都可以放在该目录下<ul>\n<li>landscape 主题，Hexo默认提供的主题</li>\n</ul>\n</li>\n<li>_config.yml ：博客配置文件</li>\n</ul>\n</li>\n</ul>\n<p>这样一个初始化的博客已经建立完成，默认提供了一篇文章，后面先发布成功后，再添加个人的文章。</p>\n</li>\n<li><p>代码编译</p>\n<p>执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>或者简写为如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>启动服务</p>\n</li>\n<li><p>部署到Github</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>本文分享一篇博客搭建文章，介绍了如何使用Hexo博客框架搭建个人博客。</p>\n<h3 id=\"Github配置\"><a href=\"#Github配置\" class=\"headerlink\" title=\"Github配置\"></a>Github配置</h3><ol>\n<li><p>Github账号</p>\n<p>首先，需要自己有一个Github账号，没有的话去GIthub官网注册一个即可。</p>\n<p>搭建博客需要一个域名（无需自己申请），GitHub 为我们提供了的GitHub Pages 功能，自动为我们提供一个以Github用户名为前缀的域名：{username}.github.io。 </p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>设置GitHub SSH key</p>\n<p>设置GIthub SSH key是为了在站点部署代码时，可以通过Hexo命令直接提交代码。如果不设置SSH Key，后期也可以使用”Https”方式的 git 仓库地址，不过该方式会弹出输入用户名和密码的界面。该方式适合在windos下的部署，在linux下会有问题。</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>创建仓库作为我们的站点代码库</p>\n<p>在Github上创建一个仓库，仓库的名称必须为：{username}.github.io。比如你的Github账号为apple，则新建的仓库名称为：apple.github.io. </p>\n</li>\n</ol>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ol>\n<li><p>安装NodeJS</p>\n<p>首先在个人电脑上安装NodeJS，下载地址为： <a href=\"https://nodejs.org/zh-cn/download/\" target=\"_blank\" rel=\"noopener\"> NodeJs下载地址</a></p>\n<p>安装完毕后，验证一下 npm 命令是否可以使用，以确保NodeJS安装成功。</p>\n</li>\n<li><p>安装Hexo</p>\n<p>NodeJS安装完成后，通过npm命令进行 Hexo的安装。Hexo是一个博客框架，帮助我们快速搭建个人博客，Hexo为我们提供一个NodeJS的客户端命令行工具，用于Hexo项目的创建，页面新建，代码编译以及部署等功能。执行以下命令进行安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -g 选项指定全局安装</span><br><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h3 id=\"博客项目搭建\"><a href=\"#博客项目搭建\" class=\"headerlink\" title=\"博客项目搭建\"></a>博客项目搭建</h3><ol>\n<li><p>初始化项目</p>\n<p>进入到项目创建目录（比如，E:\\develop）执行以下命令，初始化项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 其中blog_name是博客名称，需要设定</span><br><span class=\"line\">hexo init &#123;blog_name&#125;</span><br></pre></td></tr></table></figure>\n\n<p>比如我的博客名称为 “myblog”，可以执行以下命令来初始化项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myblog</span><br></pre></td></tr></table></figure>\n\n<p>此时，会在当前目录下面生成myblog文件夹，该文件夹下面包含以下文件：</p>\n<ul>\n<li>myblog<ul>\n<li>scaffolds : 生成博客文章的模板文件目录</li>\n<li>source : 博客源码目录</li>\n<li>themes：主题目录，后期下载的主题都可以放在该目录下<ul>\n<li>landscape 主题，Hexo默认提供的主题</li>\n</ul>\n</li>\n<li>_config.yml ：博客配置文件</li>\n</ul>\n</li>\n</ul>\n<p>这样一个初始化的博客已经建立完成，默认提供了一篇文章，后面先发布成功后，再添加个人的文章。</p>\n</li>\n<li><p>代码编译</p>\n<p>执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>或者简写为如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>启动服务</p>\n</li>\n<li><p>部署到Github</p>\n</li>\n</ol>\n"},{"title":"pyinstaller程序打包与发布","date":"2019-11-11T01:36:27.000Z","_content":"\n\n\n该文档说明了如何使用 pyinstaller 将应用打包成可执行的exe文件\n\n<!-- more -->\n\n### Pyinstaller安装\n\n> 1. 使用pip进行安装\n>\n>    ```\n>    # 安装\n>    $ pip install pyinstaller\n>    ```\n>\n> 2. 几个命令介绍\n>   | 命令选项 | 命令说明                                                    |\n>    | :------: | :---------------------------------------------------------- |\n>    |    -F    | 打包成单个exe文件                                           |\n>    |    -D    | 打包成文件形式。Flask项目因为有非python文件，需要使用该选项 |\n>    |    -i    | 指定打包后应用程序的图标 --- ico文件                        |\n>    |    -w    | 指定对于Qt桌面程序，不显示Dos窗口                           |\n>    |    -d    | 编译为debug模式，用于测试时获取日志信息                     |\n\n### 应用程序打包\n\n> 1. 打包成EXE\n>\n>    ```\n>    #在项目根目录下，执行打包命令\n>    $ pyinstaller -D -w code/run.py\n>    \n>    # 如果已有 .spec 文件，可以执行以下命令打包\n>    $ pyinstaller run.spec\n>    ```\n>\n> 2. 找到可执行文件目录\n>\n>    ```\n>    2.1 打包完成后，生成一个dist目录，下面有一个run文件夹。run文件夹下面包含了可执行文件以及所有的项目依赖文件。\n>    2.2 对于Flask项目，在运行前需要将resources目录复制到该文件夹下面\n>    ```\n>\n> 3. 运行/发布\n>\n>    ```\n>    运行 run.exe即可\n>    ```\n\n### 制作程序安装包\n\n> 制作成安装包需要使用 Inno SetUp 软件。\n>\n> 1. 安装 InnoSetUp\n>\n>    ```\n>    下载安装 inno setup （下载地址：http://www.jrsoftware.org/isdl.php）\n>    ```\n>\n> 2. 启动 InnoSetUp 新建项目即可根据步骤完成\n>\n> 3. 制作完成后，可以进行正常发布\n\n### 出现问题以及解决\n\n> 1. pyinstaller与PyQt版本兼容问题\n>\n> ```\n> 原因：pyinstaller要与PyQt5的版本对应\n> \n> 解决方案：目前已测试 pyinstaller 3.5 需要使用 PyQt5==5.13.1 版本。\n> 其他具体兼容性需要去官网查询\n> ```\n>\n> 2. sklearn等机器学习包不能打包\n>\n> ```\n> 原因：该问题是因为机器学习包等用到了大量的C++库。这些文件是c/c++编译成的python库，供python调用，需要额外处理。\n> \n> 解决方案：将这些库添加到 spec文件的 hiddenimports 属性中。\n> hiddenimports=['cython','sklearn','sklearn.utils._cython_blas',\n>     'sklearn.neighbors.typedefs',\n>     'sklearn.neighbors.quad_tree',\n>     'sklearn.neighbors.ball_tree',\n>     'sklearn.neighbors.dist_metrics',\n>     'sklearn.neighbors.kd_tree',\n>     'sklearn.tree._utils',\n>     'sklearn.tree._criterion',\n>     'sklearn.tree._splitter',\n>     'sklearn.tree._utils'\n> ],\n> \n> 参考链接：[https://bbs.testerhome.com/articles/19886]\n> ```\n>\n> 3. pyecharts 不兼容\n>\n> ```\n> 描述：使用pyinstaller进行python程序打包的时候，对pyecharts是不兼容的，因此不能将pyecharts打包到程序当中。\n> \n> 原因：pyecharts涉及到一些js，json文件没有打包，使得整个打包软件找不到相关文件，所以报错。\n> \n> 解决：从python的site_package中找到pyecharts文件夹，并把这整个文件夹都放到与exe文件同级的文件夹下面即可\n> \n> 参考链接：[https://blog.csdn.net/weixin_43865152/article/details/93781051]\n> ```\n>\n> 4. 打包多进程程序，运行卡死电脑\n>\n>    ```\n>    具体表现：\n>    在使用Pyinstaller打包Python程序的时，打包过程正常，但在运行时会出错，表现为进程不断增加至占满电脑CPU死机。\n>    \n>    原因：\n>    因为程序使用了多进程模式，而在windows上Pyinstaller打包不支持多进程程序，需要添加特殊指令。\n>    \n>    解决方案：\n>    在 if __name__=='__main__:'下添加一句\n>    \tmultiprocessing.freeze_support()\n>    即可。\n>    \n>    参考链接：[https://blog.csdn.net/zyc121561/article/details/82941056]\n>    ```\n>\n> 5. 后续补充","source":"_posts/pyinstaller.md","raw":"---\ntitle: pyinstaller程序打包与发布\ndate: 2019-11-11 09:36:27\ntags: Python\n---\n\n\n\n该文档说明了如何使用 pyinstaller 将应用打包成可执行的exe文件\n\n<!-- more -->\n\n### Pyinstaller安装\n\n> 1. 使用pip进行安装\n>\n>    ```\n>    # 安装\n>    $ pip install pyinstaller\n>    ```\n>\n> 2. 几个命令介绍\n>   | 命令选项 | 命令说明                                                    |\n>    | :------: | :---------------------------------------------------------- |\n>    |    -F    | 打包成单个exe文件                                           |\n>    |    -D    | 打包成文件形式。Flask项目因为有非python文件，需要使用该选项 |\n>    |    -i    | 指定打包后应用程序的图标 --- ico文件                        |\n>    |    -w    | 指定对于Qt桌面程序，不显示Dos窗口                           |\n>    |    -d    | 编译为debug模式，用于测试时获取日志信息                     |\n\n### 应用程序打包\n\n> 1. 打包成EXE\n>\n>    ```\n>    #在项目根目录下，执行打包命令\n>    $ pyinstaller -D -w code/run.py\n>    \n>    # 如果已有 .spec 文件，可以执行以下命令打包\n>    $ pyinstaller run.spec\n>    ```\n>\n> 2. 找到可执行文件目录\n>\n>    ```\n>    2.1 打包完成后，生成一个dist目录，下面有一个run文件夹。run文件夹下面包含了可执行文件以及所有的项目依赖文件。\n>    2.2 对于Flask项目，在运行前需要将resources目录复制到该文件夹下面\n>    ```\n>\n> 3. 运行/发布\n>\n>    ```\n>    运行 run.exe即可\n>    ```\n\n### 制作程序安装包\n\n> 制作成安装包需要使用 Inno SetUp 软件。\n>\n> 1. 安装 InnoSetUp\n>\n>    ```\n>    下载安装 inno setup （下载地址：http://www.jrsoftware.org/isdl.php）\n>    ```\n>\n> 2. 启动 InnoSetUp 新建项目即可根据步骤完成\n>\n> 3. 制作完成后，可以进行正常发布\n\n### 出现问题以及解决\n\n> 1. pyinstaller与PyQt版本兼容问题\n>\n> ```\n> 原因：pyinstaller要与PyQt5的版本对应\n> \n> 解决方案：目前已测试 pyinstaller 3.5 需要使用 PyQt5==5.13.1 版本。\n> 其他具体兼容性需要去官网查询\n> ```\n>\n> 2. sklearn等机器学习包不能打包\n>\n> ```\n> 原因：该问题是因为机器学习包等用到了大量的C++库。这些文件是c/c++编译成的python库，供python调用，需要额外处理。\n> \n> 解决方案：将这些库添加到 spec文件的 hiddenimports 属性中。\n> hiddenimports=['cython','sklearn','sklearn.utils._cython_blas',\n>     'sklearn.neighbors.typedefs',\n>     'sklearn.neighbors.quad_tree',\n>     'sklearn.neighbors.ball_tree',\n>     'sklearn.neighbors.dist_metrics',\n>     'sklearn.neighbors.kd_tree',\n>     'sklearn.tree._utils',\n>     'sklearn.tree._criterion',\n>     'sklearn.tree._splitter',\n>     'sklearn.tree._utils'\n> ],\n> \n> 参考链接：[https://bbs.testerhome.com/articles/19886]\n> ```\n>\n> 3. pyecharts 不兼容\n>\n> ```\n> 描述：使用pyinstaller进行python程序打包的时候，对pyecharts是不兼容的，因此不能将pyecharts打包到程序当中。\n> \n> 原因：pyecharts涉及到一些js，json文件没有打包，使得整个打包软件找不到相关文件，所以报错。\n> \n> 解决：从python的site_package中找到pyecharts文件夹，并把这整个文件夹都放到与exe文件同级的文件夹下面即可\n> \n> 参考链接：[https://blog.csdn.net/weixin_43865152/article/details/93781051]\n> ```\n>\n> 4. 打包多进程程序，运行卡死电脑\n>\n>    ```\n>    具体表现：\n>    在使用Pyinstaller打包Python程序的时，打包过程正常，但在运行时会出错，表现为进程不断增加至占满电脑CPU死机。\n>    \n>    原因：\n>    因为程序使用了多进程模式，而在windows上Pyinstaller打包不支持多进程程序，需要添加特殊指令。\n>    \n>    解决方案：\n>    在 if __name__=='__main__:'下添加一句\n>    \tmultiprocessing.freeze_support()\n>    即可。\n>    \n>    参考链接：[https://blog.csdn.net/zyc121561/article/details/82941056]\n>    ```\n>\n> 5. 后续补充","slug":"pyinstaller","published":1,"updated":"2019-11-11T02:26:50.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vnu8ka0008zwu6ewg5efh7","content":"<p>该文档说明了如何使用 pyinstaller 将应用打包成可执行的exe文件</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Pyinstaller安装\"><a href=\"#Pyinstaller安装\" class=\"headerlink\" title=\"Pyinstaller安装\"></a>Pyinstaller安装</h3><blockquote>\n<ol>\n<li><p>使用pip进行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">$ pip install pyinstaller</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>几个命令介绍</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令选项</th>\n<th align=\"left\">命令说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-F</td>\n<td align=\"left\">打包成单个exe文件</td>\n</tr>\n<tr>\n<td align=\"center\">-D</td>\n<td align=\"left\">打包成文件形式。Flask项目因为有非python文件，需要使用该选项</td>\n</tr>\n<tr>\n<td align=\"center\">-i</td>\n<td align=\"left\">指定打包后应用程序的图标 — ico文件</td>\n</tr>\n<tr>\n<td align=\"center\">-w</td>\n<td align=\"left\">指定对于Qt桌面程序，不显示Dos窗口</td>\n</tr>\n<tr>\n<td align=\"center\">-d</td>\n<td align=\"left\">编译为debug模式，用于测试时获取日志信息</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"应用程序打包\"><a href=\"#应用程序打包\" class=\"headerlink\" title=\"应用程序打包\"></a>应用程序打包</h3><blockquote>\n<ol>\n<li><p>打包成EXE</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在项目根目录下，执行打包命令</span><br><span class=\"line\">$ pyinstaller -D -w code/run.py</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果已有 .spec 文件，可以执行以下命令打包</span><br><span class=\"line\">$ pyinstaller run.spec</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到可执行文件目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.1 打包完成后，生成一个dist目录，下面有一个run文件夹。run文件夹下面包含了可执行文件以及所有的项目依赖文件。</span><br><span class=\"line\">2.2 对于Flask项目，在运行前需要将resources目录复制到该文件夹下面</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行/发布</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行 run.exe即可</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"制作程序安装包\"><a href=\"#制作程序安装包\" class=\"headerlink\" title=\"制作程序安装包\"></a>制作程序安装包</h3><blockquote>\n<p>制作成安装包需要使用 Inno SetUp 软件。</p>\n<ol>\n<li><p>安装 InnoSetUp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载安装 inno setup （下载地址：http://www.jrsoftware.org/isdl.php）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动 InnoSetUp 新建项目即可根据步骤完成</p>\n</li>\n<li><p>制作完成后，可以进行正常发布</p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"出现问题以及解决\"><a href=\"#出现问题以及解决\" class=\"headerlink\" title=\"出现问题以及解决\"></a>出现问题以及解决</h3><blockquote>\n<ol>\n<li>pyinstaller与PyQt版本兼容问题</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原因：pyinstaller要与PyQt5的版本对应</span><br><span class=\"line\"></span><br><span class=\"line\">解决方案：目前已测试 pyinstaller 3.5 需要使用 PyQt5==5.13.1 版本。</span><br><span class=\"line\">其他具体兼容性需要去官网查询</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>sklearn等机器学习包不能打包</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原因：该问题是因为机器学习包等用到了大量的C++库。这些文件是c/c++编译成的python库，供python调用，需要额外处理。</span><br><span class=\"line\"></span><br><span class=\"line\">解决方案：将这些库添加到 spec文件的 hiddenimports 属性中。</span><br><span class=\"line\">hiddenimports=[&apos;cython&apos;,&apos;sklearn&apos;,&apos;sklearn.utils._cython_blas&apos;,</span><br><span class=\"line\">    &apos;sklearn.neighbors.typedefs&apos;,</span><br><span class=\"line\">    &apos;sklearn.neighbors.quad_tree&apos;,</span><br><span class=\"line\">    &apos;sklearn.neighbors.ball_tree&apos;,</span><br><span class=\"line\">    &apos;sklearn.neighbors.dist_metrics&apos;,</span><br><span class=\"line\">    &apos;sklearn.neighbors.kd_tree&apos;,</span><br><span class=\"line\">    &apos;sklearn.tree._utils&apos;,</span><br><span class=\"line\">    &apos;sklearn.tree._criterion&apos;,</span><br><span class=\"line\">    &apos;sklearn.tree._splitter&apos;,</span><br><span class=\"line\">    &apos;sklearn.tree._utils&apos;</span><br><span class=\"line\">],</span><br><span class=\"line\"></span><br><span class=\"line\">参考链接：[https://bbs.testerhome.com/articles/19886]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>pyecharts 不兼容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">描述：使用pyinstaller进行python程序打包的时候，对pyecharts是不兼容的，因此不能将pyecharts打包到程序当中。</span><br><span class=\"line\"></span><br><span class=\"line\">原因：pyecharts涉及到一些js，json文件没有打包，使得整个打包软件找不到相关文件，所以报错。</span><br><span class=\"line\"></span><br><span class=\"line\">解决：从python的site_package中找到pyecharts文件夹，并把这整个文件夹都放到与exe文件同级的文件夹下面即可</span><br><span class=\"line\"></span><br><span class=\"line\">参考链接：[https://blog.csdn.net/weixin_43865152/article/details/93781051]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>打包多进程程序，运行卡死电脑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">具体表现：</span><br><span class=\"line\">在使用Pyinstaller打包Python程序的时，打包过程正常，但在运行时会出错，表现为进程不断增加至占满电脑CPU死机。</span><br><span class=\"line\"></span><br><span class=\"line\">原因：</span><br><span class=\"line\">因为程序使用了多进程模式，而在windows上Pyinstaller打包不支持多进程程序，需要添加特殊指令。</span><br><span class=\"line\"></span><br><span class=\"line\">解决方案：</span><br><span class=\"line\">在 if __name__==&apos;__main__:&apos;下添加一句</span><br><span class=\"line\">\tmultiprocessing.freeze_support()</span><br><span class=\"line\">即可。</span><br><span class=\"line\"></span><br><span class=\"line\">参考链接：[https://blog.csdn.net/zyc121561/article/details/82941056]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>后续补充</p>\n</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>该文档说明了如何使用 pyinstaller 将应用打包成可执行的exe文件</p>","more":"<h3 id=\"Pyinstaller安装\"><a href=\"#Pyinstaller安装\" class=\"headerlink\" title=\"Pyinstaller安装\"></a>Pyinstaller安装</h3><blockquote>\n<ol>\n<li><p>使用pip进行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">$ pip install pyinstaller</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>几个命令介绍</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令选项</th>\n<th align=\"left\">命令说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-F</td>\n<td align=\"left\">打包成单个exe文件</td>\n</tr>\n<tr>\n<td align=\"center\">-D</td>\n<td align=\"left\">打包成文件形式。Flask项目因为有非python文件，需要使用该选项</td>\n</tr>\n<tr>\n<td align=\"center\">-i</td>\n<td align=\"left\">指定打包后应用程序的图标 — ico文件</td>\n</tr>\n<tr>\n<td align=\"center\">-w</td>\n<td align=\"left\">指定对于Qt桌面程序，不显示Dos窗口</td>\n</tr>\n<tr>\n<td align=\"center\">-d</td>\n<td align=\"left\">编译为debug模式，用于测试时获取日志信息</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"应用程序打包\"><a href=\"#应用程序打包\" class=\"headerlink\" title=\"应用程序打包\"></a>应用程序打包</h3><blockquote>\n<ol>\n<li><p>打包成EXE</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在项目根目录下，执行打包命令</span><br><span class=\"line\">$ pyinstaller -D -w code/run.py</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果已有 .spec 文件，可以执行以下命令打包</span><br><span class=\"line\">$ pyinstaller run.spec</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到可执行文件目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.1 打包完成后，生成一个dist目录，下面有一个run文件夹。run文件夹下面包含了可执行文件以及所有的项目依赖文件。</span><br><span class=\"line\">2.2 对于Flask项目，在运行前需要将resources目录复制到该文件夹下面</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行/发布</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行 run.exe即可</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"制作程序安装包\"><a href=\"#制作程序安装包\" class=\"headerlink\" title=\"制作程序安装包\"></a>制作程序安装包</h3><blockquote>\n<p>制作成安装包需要使用 Inno SetUp 软件。</p>\n<ol>\n<li><p>安装 InnoSetUp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载安装 inno setup （下载地址：http://www.jrsoftware.org/isdl.php）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动 InnoSetUp 新建项目即可根据步骤完成</p>\n</li>\n<li><p>制作完成后，可以进行正常发布</p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"出现问题以及解决\"><a href=\"#出现问题以及解决\" class=\"headerlink\" title=\"出现问题以及解决\"></a>出现问题以及解决</h3><blockquote>\n<ol>\n<li>pyinstaller与PyQt版本兼容问题</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原因：pyinstaller要与PyQt5的版本对应</span><br><span class=\"line\"></span><br><span class=\"line\">解决方案：目前已测试 pyinstaller 3.5 需要使用 PyQt5==5.13.1 版本。</span><br><span class=\"line\">其他具体兼容性需要去官网查询</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>sklearn等机器学习包不能打包</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原因：该问题是因为机器学习包等用到了大量的C++库。这些文件是c/c++编译成的python库，供python调用，需要额外处理。</span><br><span class=\"line\"></span><br><span class=\"line\">解决方案：将这些库添加到 spec文件的 hiddenimports 属性中。</span><br><span class=\"line\">hiddenimports=[&apos;cython&apos;,&apos;sklearn&apos;,&apos;sklearn.utils._cython_blas&apos;,</span><br><span class=\"line\">    &apos;sklearn.neighbors.typedefs&apos;,</span><br><span class=\"line\">    &apos;sklearn.neighbors.quad_tree&apos;,</span><br><span class=\"line\">    &apos;sklearn.neighbors.ball_tree&apos;,</span><br><span class=\"line\">    &apos;sklearn.neighbors.dist_metrics&apos;,</span><br><span class=\"line\">    &apos;sklearn.neighbors.kd_tree&apos;,</span><br><span class=\"line\">    &apos;sklearn.tree._utils&apos;,</span><br><span class=\"line\">    &apos;sklearn.tree._criterion&apos;,</span><br><span class=\"line\">    &apos;sklearn.tree._splitter&apos;,</span><br><span class=\"line\">    &apos;sklearn.tree._utils&apos;</span><br><span class=\"line\">],</span><br><span class=\"line\"></span><br><span class=\"line\">参考链接：[https://bbs.testerhome.com/articles/19886]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>pyecharts 不兼容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">描述：使用pyinstaller进行python程序打包的时候，对pyecharts是不兼容的，因此不能将pyecharts打包到程序当中。</span><br><span class=\"line\"></span><br><span class=\"line\">原因：pyecharts涉及到一些js，json文件没有打包，使得整个打包软件找不到相关文件，所以报错。</span><br><span class=\"line\"></span><br><span class=\"line\">解决：从python的site_package中找到pyecharts文件夹，并把这整个文件夹都放到与exe文件同级的文件夹下面即可</span><br><span class=\"line\"></span><br><span class=\"line\">参考链接：[https://blog.csdn.net/weixin_43865152/article/details/93781051]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>打包多进程程序，运行卡死电脑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">具体表现：</span><br><span class=\"line\">在使用Pyinstaller打包Python程序的时，打包过程正常，但在运行时会出错，表现为进程不断增加至占满电脑CPU死机。</span><br><span class=\"line\"></span><br><span class=\"line\">原因：</span><br><span class=\"line\">因为程序使用了多进程模式，而在windows上Pyinstaller打包不支持多进程程序，需要添加特殊指令。</span><br><span class=\"line\"></span><br><span class=\"line\">解决方案：</span><br><span class=\"line\">在 if __name__==&apos;__main__:&apos;下添加一句</span><br><span class=\"line\">\tmultiprocessing.freeze_support()</span><br><span class=\"line\">即可。</span><br><span class=\"line\"></span><br><span class=\"line\">参考链接：[https://blog.csdn.net/zyc121561/article/details/82941056]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>后续补充</p>\n</li>\n</ol>\n</blockquote>"},{"title":"Python环境安装","date":"2019-11-08T09:50:51.000Z","_content":"\n\n\n本文介绍了Python环境的安装， 以及依赖包的在线和离线状态下的下载与更新。同时对虚拟环境的开启做了简单介绍。\n\n<!-- more -->\n\n> 1. 下载Python二进制文件\n>\n>    ```\n>    下载地址：https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz\n>    linux系统下载: wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz\n>    ```\n>\n> 2. 将二进制文件上传到要安装服务器\n>\n>    ```\n>    SSH软件上传\n>    ```\n>\n> 3. 安装--以下步骤都在要安装的服务器上操作\n>\n>    ```\n>    1. tar -zxvf Python-3.7.4.tgz # 解压安装包\n>    2. cd ./Python-3.7.4  # 进入解压后的目录\n>    3. ./configure --prefix=/usr/local/my_python_path #初始配置，--prefix指定安装目录\n>    4. make && make install  # 编译源码 + 程序安装\n>    ```\n>\n> 4. 安装完成，配置环境\n>\n>    ```\n>    1. 建立软连接到系统环境变量\n>    \tln -s /usr/local/my_python_path/bin/python3 /usr/bin/python3 \n>    2. pip 建立\n>    \tln -s /usr/local/my_python_path/bin/pip3 /usr/bin/pip3\n>    ```\n>    \n> 5.  测试是否安装成功\n>\n>    ```\n>    1. python3 -V # 验证python3\n>    2. pip3 -V # 验证pip\n>    ```\n>    \n> 6.  更新pip(非必须)\n>\n>    ```\n>    # python自带pip可能不是最新，可以更新\n>    pip3 install --upgrade pip\n>    ```\n>\n\n### 开启虚拟环境(非必须)\n\n> 虚拟环境是指针对部署项目的一个单独的python环境（依赖包归该虚拟环境所有），其他项目的依赖不会对其产生影响。\n>\n> 虚拟环境不是必须的，只有在多个python项目运行，且互相依赖的相同依赖包版本不一致时，才是必须的。\n>\n> 1. 初始化虚拟环境\n>\n>    ```\n>    # 进入想要生成虚拟环境的目录下 比如 ~/apps/model\n>    # 其中第一个venv是python生成虚拟环境的命令\n>    # 第二个venv是虚拟环境存放的目录，可以修改成其他名字，比如venv-model\n>    python3 -m venv venv\n>    python3 -m venv venv-model\n>    ```\n>\n> 2. 激活虚拟环境\n>\n>    ```\n>    # 激活虚拟环境--linux系统\n>    source venv/bin/activate\n>    # 激活虚拟环境--windows系统\n>    venv/Scripts/activate.bat\n>    ```\n>\n> 3. 退出虚拟环境\n>\n>    ```\n>    # 在当前虚拟环境下，运行\n>    deactivate\n>    ```\n>\n> 虚拟环境生成后，就是一个python的运行环境，操作与在系统中一样。\n\n### 依赖包安装\n\n------\n\n如果是在虚拟环境中运行项目，请激活虚拟环境后，在虚拟环境下操作，反之在当前系统下操作即可。\n\n#### 在线安装\n\n> ```\n>  # 安装依赖包 -r 指定依赖文件\n> 1. pip3 install -r requirements.txt\n> ```\n\n#### 离线安装\n\n> 1. 备份依赖包---可上网的开发环境\n>\n>    ```\n>    # 备份依赖关系\n>    1. pip3 freeze > requirement.txt\n>    # 在线下载依赖包到指定目录\n>    2. pip3 download -d pack_directory -r requirements.txt\n>    \t-d 指定依赖包保存目录\n>    \t-r 指定依赖包汇总文件\n>    ```\n>\n> 2. 还原依赖包---离线服务器\n>\n>    ```\n>    # 安装依赖包\n>    1. pip3 install --no-index --find-links=pack_directory -r requirements.txt\n>     --no-index 禁止去网络下载\n>     --find-links 指定去哪里寻找安装包，这里是安装包文件夹\n>     -r 指定依赖包文件\n>    ```\n>\n\n","source":"_posts/python.md","raw":"---\ntitle: Python环境安装\ndate: 2019-11-08 17:50:51\ntags:\n- Python\ncategories:\n- 环境安装\n---\n\n\n\n本文介绍了Python环境的安装， 以及依赖包的在线和离线状态下的下载与更新。同时对虚拟环境的开启做了简单介绍。\n\n<!-- more -->\n\n> 1. 下载Python二进制文件\n>\n>    ```\n>    下载地址：https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz\n>    linux系统下载: wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz\n>    ```\n>\n> 2. 将二进制文件上传到要安装服务器\n>\n>    ```\n>    SSH软件上传\n>    ```\n>\n> 3. 安装--以下步骤都在要安装的服务器上操作\n>\n>    ```\n>    1. tar -zxvf Python-3.7.4.tgz # 解压安装包\n>    2. cd ./Python-3.7.4  # 进入解压后的目录\n>    3. ./configure --prefix=/usr/local/my_python_path #初始配置，--prefix指定安装目录\n>    4. make && make install  # 编译源码 + 程序安装\n>    ```\n>\n> 4. 安装完成，配置环境\n>\n>    ```\n>    1. 建立软连接到系统环境变量\n>    \tln -s /usr/local/my_python_path/bin/python3 /usr/bin/python3 \n>    2. pip 建立\n>    \tln -s /usr/local/my_python_path/bin/pip3 /usr/bin/pip3\n>    ```\n>    \n> 5.  测试是否安装成功\n>\n>    ```\n>    1. python3 -V # 验证python3\n>    2. pip3 -V # 验证pip\n>    ```\n>    \n> 6.  更新pip(非必须)\n>\n>    ```\n>    # python自带pip可能不是最新，可以更新\n>    pip3 install --upgrade pip\n>    ```\n>\n\n### 开启虚拟环境(非必须)\n\n> 虚拟环境是指针对部署项目的一个单独的python环境（依赖包归该虚拟环境所有），其他项目的依赖不会对其产生影响。\n>\n> 虚拟环境不是必须的，只有在多个python项目运行，且互相依赖的相同依赖包版本不一致时，才是必须的。\n>\n> 1. 初始化虚拟环境\n>\n>    ```\n>    # 进入想要生成虚拟环境的目录下 比如 ~/apps/model\n>    # 其中第一个venv是python生成虚拟环境的命令\n>    # 第二个venv是虚拟环境存放的目录，可以修改成其他名字，比如venv-model\n>    python3 -m venv venv\n>    python3 -m venv venv-model\n>    ```\n>\n> 2. 激活虚拟环境\n>\n>    ```\n>    # 激活虚拟环境--linux系统\n>    source venv/bin/activate\n>    # 激活虚拟环境--windows系统\n>    venv/Scripts/activate.bat\n>    ```\n>\n> 3. 退出虚拟环境\n>\n>    ```\n>    # 在当前虚拟环境下，运行\n>    deactivate\n>    ```\n>\n> 虚拟环境生成后，就是一个python的运行环境，操作与在系统中一样。\n\n### 依赖包安装\n\n------\n\n如果是在虚拟环境中运行项目，请激活虚拟环境后，在虚拟环境下操作，反之在当前系统下操作即可。\n\n#### 在线安装\n\n> ```\n>  # 安装依赖包 -r 指定依赖文件\n> 1. pip3 install -r requirements.txt\n> ```\n\n#### 离线安装\n\n> 1. 备份依赖包---可上网的开发环境\n>\n>    ```\n>    # 备份依赖关系\n>    1. pip3 freeze > requirement.txt\n>    # 在线下载依赖包到指定目录\n>    2. pip3 download -d pack_directory -r requirements.txt\n>    \t-d 指定依赖包保存目录\n>    \t-r 指定依赖包汇总文件\n>    ```\n>\n> 2. 还原依赖包---离线服务器\n>\n>    ```\n>    # 安装依赖包\n>    1. pip3 install --no-index --find-links=pack_directory -r requirements.txt\n>     --no-index 禁止去网络下载\n>     --find-links 指定去哪里寻找安装包，这里是安装包文件夹\n>     -r 指定依赖包文件\n>    ```\n>\n\n","slug":"python","published":1,"updated":"2019-11-11T02:44:55.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vnu8ke000azwu64rkz308k","content":"<p>本文介绍了Python环境的安装， 以及依赖包的在线和离线状态下的下载与更新。同时对虚拟环境的开启做了简单介绍。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<ol>\n<li><p>下载Python二进制文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载地址：https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</span><br><span class=\"line\">linux系统下载: wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将二进制文件上传到要安装服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSH软件上传</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装–以下步骤都在要安装的服务器上操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. tar -zxvf Python-3.7.4.tgz # 解压安装包</span><br><span class=\"line\">2. cd ./Python-3.7.4  # 进入解压后的目录</span><br><span class=\"line\">3. ./configure --prefix=/usr/local/my_python_path #初始配置，--prefix指定安装目录</span><br><span class=\"line\">4. make &amp;&amp; make install  # 编译源码 + 程序安装</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装完成，配置环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 建立软连接到系统环境变量</span><br><span class=\"line\">\tln -s /usr/local/my_python_path/bin/python3 /usr/bin/python3 </span><br><span class=\"line\">2. pip 建立</span><br><span class=\"line\">\tln -s /usr/local/my_python_path/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. python3 -V # 验证python3</span><br><span class=\"line\">2. pip3 -V # 验证pip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新pip(非必须)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># python自带pip可能不是最新，可以更新</span><br><span class=\"line\">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</blockquote>\n<h3 id=\"开启虚拟环境-非必须\"><a href=\"#开启虚拟环境-非必须\" class=\"headerlink\" title=\"开启虚拟环境(非必须)\"></a>开启虚拟环境(非必须)</h3><blockquote>\n<p>虚拟环境是指针对部署项目的一个单独的python环境（依赖包归该虚拟环境所有），其他项目的依赖不会对其产生影响。</p>\n<p>虚拟环境不是必须的，只有在多个python项目运行，且互相依赖的相同依赖包版本不一致时，才是必须的。</p>\n<ol>\n<li><p>初始化虚拟环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 进入想要生成虚拟环境的目录下 比如 ~/apps/model</span><br><span class=\"line\"># 其中第一个venv是python生成虚拟环境的命令</span><br><span class=\"line\"># 第二个venv是虚拟环境存放的目录，可以修改成其他名字，比如venv-model</span><br><span class=\"line\">python3 -m venv venv</span><br><span class=\"line\">python3 -m venv venv-model</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>激活虚拟环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 激活虚拟环境--linux系统</span><br><span class=\"line\">source venv/bin/activate</span><br><span class=\"line\"># 激活虚拟环境--windows系统</span><br><span class=\"line\">venv/Scripts/activate.bat</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>退出虚拟环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在当前虚拟环境下，运行</span><br><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>虚拟环境生成后，就是一个python的运行环境，操作与在系统中一样。</p>\n</blockquote>\n<h3 id=\"依赖包安装\"><a href=\"#依赖包安装\" class=\"headerlink\" title=\"依赖包安装\"></a>依赖包安装</h3><hr>\n<p>如果是在虚拟环境中运行项目，请激活虚拟环境后，在虚拟环境下操作，反之在当前系统下操作即可。</p>\n<h4 id=\"在线安装\"><a href=\"#在线安装\" class=\"headerlink\" title=\"在线安装\"></a>在线安装</h4><blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # 安装依赖包 -r 指定依赖文件</span><br><span class=\"line\">1. pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"离线安装\"><a href=\"#离线安装\" class=\"headerlink\" title=\"离线安装\"></a>离线安装</h4><blockquote>\n<ol>\n<li><p>备份依赖包—可上网的开发环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 备份依赖关系</span><br><span class=\"line\">1. pip3 freeze &gt; requirement.txt</span><br><span class=\"line\"># 在线下载依赖包到指定目录</span><br><span class=\"line\">2. pip3 download -d pack_directory -r requirements.txt</span><br><span class=\"line\">\t-d 指定依赖包保存目录</span><br><span class=\"line\">\t-r 指定依赖包汇总文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>还原依赖包—离线服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装依赖包</span><br><span class=\"line\">1. pip3 install --no-index --find-links=pack_directory -r requirements.txt</span><br><span class=\"line\"> --no-index 禁止去网络下载</span><br><span class=\"line\"> --find-links 指定去哪里寻找安装包，这里是安装包文件夹</span><br><span class=\"line\"> -r 指定依赖包文件</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本文介绍了Python环境的安装， 以及依赖包的在线和离线状态下的下载与更新。同时对虚拟环境的开启做了简单介绍。</p>","more":"<blockquote>\n<ol>\n<li><p>下载Python二进制文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载地址：https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</span><br><span class=\"line\">linux系统下载: wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将二进制文件上传到要安装服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSH软件上传</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装–以下步骤都在要安装的服务器上操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. tar -zxvf Python-3.7.4.tgz # 解压安装包</span><br><span class=\"line\">2. cd ./Python-3.7.4  # 进入解压后的目录</span><br><span class=\"line\">3. ./configure --prefix=/usr/local/my_python_path #初始配置，--prefix指定安装目录</span><br><span class=\"line\">4. make &amp;&amp; make install  # 编译源码 + 程序安装</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装完成，配置环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 建立软连接到系统环境变量</span><br><span class=\"line\">\tln -s /usr/local/my_python_path/bin/python3 /usr/bin/python3 </span><br><span class=\"line\">2. pip 建立</span><br><span class=\"line\">\tln -s /usr/local/my_python_path/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. python3 -V # 验证python3</span><br><span class=\"line\">2. pip3 -V # 验证pip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新pip(非必须)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># python自带pip可能不是最新，可以更新</span><br><span class=\"line\">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</blockquote>\n<h3 id=\"开启虚拟环境-非必须\"><a href=\"#开启虚拟环境-非必须\" class=\"headerlink\" title=\"开启虚拟环境(非必须)\"></a>开启虚拟环境(非必须)</h3><blockquote>\n<p>虚拟环境是指针对部署项目的一个单独的python环境（依赖包归该虚拟环境所有），其他项目的依赖不会对其产生影响。</p>\n<p>虚拟环境不是必须的，只有在多个python项目运行，且互相依赖的相同依赖包版本不一致时，才是必须的。</p>\n<ol>\n<li><p>初始化虚拟环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 进入想要生成虚拟环境的目录下 比如 ~/apps/model</span><br><span class=\"line\"># 其中第一个venv是python生成虚拟环境的命令</span><br><span class=\"line\"># 第二个venv是虚拟环境存放的目录，可以修改成其他名字，比如venv-model</span><br><span class=\"line\">python3 -m venv venv</span><br><span class=\"line\">python3 -m venv venv-model</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>激活虚拟环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 激活虚拟环境--linux系统</span><br><span class=\"line\">source venv/bin/activate</span><br><span class=\"line\"># 激活虚拟环境--windows系统</span><br><span class=\"line\">venv/Scripts/activate.bat</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>退出虚拟环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在当前虚拟环境下，运行</span><br><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>虚拟环境生成后，就是一个python的运行环境，操作与在系统中一样。</p>\n</blockquote>\n<h3 id=\"依赖包安装\"><a href=\"#依赖包安装\" class=\"headerlink\" title=\"依赖包安装\"></a>依赖包安装</h3><hr>\n<p>如果是在虚拟环境中运行项目，请激活虚拟环境后，在虚拟环境下操作，反之在当前系统下操作即可。</p>\n<h4 id=\"在线安装\"><a href=\"#在线安装\" class=\"headerlink\" title=\"在线安装\"></a>在线安装</h4><blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # 安装依赖包 -r 指定依赖文件</span><br><span class=\"line\">1. pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"离线安装\"><a href=\"#离线安装\" class=\"headerlink\" title=\"离线安装\"></a>离线安装</h4><blockquote>\n<ol>\n<li><p>备份依赖包—可上网的开发环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 备份依赖关系</span><br><span class=\"line\">1. pip3 freeze &gt; requirement.txt</span><br><span class=\"line\"># 在线下载依赖包到指定目录</span><br><span class=\"line\">2. pip3 download -d pack_directory -r requirements.txt</span><br><span class=\"line\">\t-d 指定依赖包保存目录</span><br><span class=\"line\">\t-r 指定依赖包汇总文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>还原依赖包—离线服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装依赖包</span><br><span class=\"line\">1. pip3 install --no-index --find-links=pack_directory -r requirements.txt</span><br><span class=\"line\"> --no-index 禁止去网络下载</span><br><span class=\"line\"> --find-links 指定去哪里寻找安装包，这里是安装包文件夹</span><br><span class=\"line\"> -r 指定依赖包文件</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</blockquote>"},{"title":"uwsgi服务安装","date":"2019-11-08T12:50:51.000Z","_content":"\nuwsgi是linux操作系统中，通过python编写的支持wsgi规范的python web服务器，。支持Flask/Django等编写的web程序，常用与Flask应用的生产部署。\n\n<!-- more -->\n\n### pip安装\n\n1. 安装 python 提供的最新版 uwsgi\n\n   ```\n   # 系统级安装--非虚拟环境下安装\n   pip install uwsgi\n   ```\n\n2. 制作软连接\n\n   ```\n   # uwsgi连接到环境变量，便于直接使用\n   # uwsgi_path：uwsgi的安装路径 一般为 python_home/site-packages/uwsgi\n   ln -s /uwsgi_path/uwsgi /usr/local/bin\n   ```\n\n### 二进制安装--适合离线\n\n1. uwsgi二进制文件准备\n\n   方式：网络下载最新版本\n\n   ```\n下载地址：http://projects.unbit.it/downloads/uwsgi-latest.tar.gz\n   \n   linux系统下载: wget http://projects.unbit.it/downloads/uwsgi-latest.tar.gz\n   ```\n   \n2. 文件解压编译安装\n\n   ```\n   # 解压安装包\n   $ tar zxvf uwsgi-latest.tar.gz\n   # 重命名为uwsgi(非必须)\n   $ mv uwsgi-latest/ uwsgi\n   # 进入uwsgi目录，编译安装\n   $ cd uwsgi\n   $ make\n   ```\n\n3. 制作软连接\n\n   ```\n   # uwsgi连接到环境变量，便于直接使用\n   # 执行目录为当前uwsgi目录\n   ln -s ./uwsgi /usr/local/bin\n   ```\n\n### uwsgi应用操作\n\n1. 应用启动\n\n   ```\n   # --ini 指定 uwsgi 配置文件路径\n   uwsgi --ini uwsgi.ini\n   ```\n\n2. 应用重启\n\n   ```\n   # --reload指定模式为重启\n   # uwsgi.pid 为 uwsgi应用的pid进程ID存储文件\n   # 该文件在 uwsgi.ini 中配置\n   uwsgi --reload uwsgi.pid\n   ```\n\n3. 关闭应用\n\n   ```\n   # --reload指定模式为重启\n   # uwsgi.pid 为 uwsgi应用的pid进程ID存储文件\n   # 该文件在 uwsgi.ini 中配置\n   uwsgi --stop uwsgi.pid\n   ```\n\n","source":"_posts/uwsgigi-server.md","raw":"---\ntitle: uwsgi服务安装\ndate: 2019-11-08 20:50:51\ntags:\n- UWSGI\ncategories:\n- 环境安装\n---\n\nuwsgi是linux操作系统中，通过python编写的支持wsgi规范的python web服务器，。支持Flask/Django等编写的web程序，常用与Flask应用的生产部署。\n\n<!-- more -->\n\n### pip安装\n\n1. 安装 python 提供的最新版 uwsgi\n\n   ```\n   # 系统级安装--非虚拟环境下安装\n   pip install uwsgi\n   ```\n\n2. 制作软连接\n\n   ```\n   # uwsgi连接到环境变量，便于直接使用\n   # uwsgi_path：uwsgi的安装路径 一般为 python_home/site-packages/uwsgi\n   ln -s /uwsgi_path/uwsgi /usr/local/bin\n   ```\n\n### 二进制安装--适合离线\n\n1. uwsgi二进制文件准备\n\n   方式：网络下载最新版本\n\n   ```\n下载地址：http://projects.unbit.it/downloads/uwsgi-latest.tar.gz\n   \n   linux系统下载: wget http://projects.unbit.it/downloads/uwsgi-latest.tar.gz\n   ```\n   \n2. 文件解压编译安装\n\n   ```\n   # 解压安装包\n   $ tar zxvf uwsgi-latest.tar.gz\n   # 重命名为uwsgi(非必须)\n   $ mv uwsgi-latest/ uwsgi\n   # 进入uwsgi目录，编译安装\n   $ cd uwsgi\n   $ make\n   ```\n\n3. 制作软连接\n\n   ```\n   # uwsgi连接到环境变量，便于直接使用\n   # 执行目录为当前uwsgi目录\n   ln -s ./uwsgi /usr/local/bin\n   ```\n\n### uwsgi应用操作\n\n1. 应用启动\n\n   ```\n   # --ini 指定 uwsgi 配置文件路径\n   uwsgi --ini uwsgi.ini\n   ```\n\n2. 应用重启\n\n   ```\n   # --reload指定模式为重启\n   # uwsgi.pid 为 uwsgi应用的pid进程ID存储文件\n   # 该文件在 uwsgi.ini 中配置\n   uwsgi --reload uwsgi.pid\n   ```\n\n3. 关闭应用\n\n   ```\n   # --reload指定模式为重启\n   # uwsgi.pid 为 uwsgi应用的pid进程ID存储文件\n   # 该文件在 uwsgi.ini 中配置\n   uwsgi --stop uwsgi.pid\n   ```\n\n","slug":"uwsgigi-server","published":1,"updated":"2019-11-11T02:27:36.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vnu8kg000bzwu68dzeer5y","content":"<p>uwsgi是linux操作系统中，通过python编写的支持wsgi规范的python web服务器，。支持Flask/Django等编写的web程序，常用与Flask应用的生产部署。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"pip安装\"><a href=\"#pip安装\" class=\"headerlink\" title=\"pip安装\"></a>pip安装</h3><ol>\n<li><p>安装 python 提供的最新版 uwsgi</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 系统级安装--非虚拟环境下安装</span><br><span class=\"line\">pip install uwsgi</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>制作软连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># uwsgi连接到环境变量，便于直接使用</span><br><span class=\"line\"># uwsgi_path：uwsgi的安装路径 一般为 python_home/site-packages/uwsgi</span><br><span class=\"line\">ln -s /uwsgi_path/uwsgi /usr/local/bin</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"二进制安装–适合离线\"><a href=\"#二进制安装–适合离线\" class=\"headerlink\" title=\"二进制安装–适合离线\"></a>二进制安装–适合离线</h3><ol>\n<li><p>uwsgi二进制文件准备</p>\n<p>方式：网络下载最新版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载地址：http://projects.unbit.it/downloads/uwsgi-latest.tar.gz</span><br><span class=\"line\">   </span><br><span class=\"line\">   linux系统下载: wget http://projects.unbit.it/downloads/uwsgi-latest.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件解压编译安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压安装包</span><br><span class=\"line\">$ tar zxvf uwsgi-latest.tar.gz</span><br><span class=\"line\"># 重命名为uwsgi(非必须)</span><br><span class=\"line\">$ mv uwsgi-latest/ uwsgi</span><br><span class=\"line\"># 进入uwsgi目录，编译安装</span><br><span class=\"line\">$ cd uwsgi</span><br><span class=\"line\">$ make</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>制作软连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># uwsgi连接到环境变量，便于直接使用</span><br><span class=\"line\"># 执行目录为当前uwsgi目录</span><br><span class=\"line\">ln -s ./uwsgi /usr/local/bin</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"uwsgi应用操作\"><a href=\"#uwsgi应用操作\" class=\"headerlink\" title=\"uwsgi应用操作\"></a>uwsgi应用操作</h3><ol>\n<li><p>应用启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># --ini 指定 uwsgi 配置文件路径</span><br><span class=\"line\">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应用重启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># --reload指定模式为重启</span><br><span class=\"line\"># uwsgi.pid 为 uwsgi应用的pid进程ID存储文件</span><br><span class=\"line\"># 该文件在 uwsgi.ini 中配置</span><br><span class=\"line\">uwsgi --reload uwsgi.pid</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭应用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># --reload指定模式为重启</span><br><span class=\"line\"># uwsgi.pid 为 uwsgi应用的pid进程ID存储文件</span><br><span class=\"line\"># 该文件在 uwsgi.ini 中配置</span><br><span class=\"line\">uwsgi --stop uwsgi.pid</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>uwsgi是linux操作系统中，通过python编写的支持wsgi规范的python web服务器，。支持Flask/Django等编写的web程序，常用与Flask应用的生产部署。</p>","more":"<h3 id=\"pip安装\"><a href=\"#pip安装\" class=\"headerlink\" title=\"pip安装\"></a>pip安装</h3><ol>\n<li><p>安装 python 提供的最新版 uwsgi</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 系统级安装--非虚拟环境下安装</span><br><span class=\"line\">pip install uwsgi</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>制作软连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># uwsgi连接到环境变量，便于直接使用</span><br><span class=\"line\"># uwsgi_path：uwsgi的安装路径 一般为 python_home/site-packages/uwsgi</span><br><span class=\"line\">ln -s /uwsgi_path/uwsgi /usr/local/bin</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"二进制安装–适合离线\"><a href=\"#二进制安装–适合离线\" class=\"headerlink\" title=\"二进制安装–适合离线\"></a>二进制安装–适合离线</h3><ol>\n<li><p>uwsgi二进制文件准备</p>\n<p>方式：网络下载最新版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载地址：http://projects.unbit.it/downloads/uwsgi-latest.tar.gz</span><br><span class=\"line\">   </span><br><span class=\"line\">   linux系统下载: wget http://projects.unbit.it/downloads/uwsgi-latest.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件解压编译安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压安装包</span><br><span class=\"line\">$ tar zxvf uwsgi-latest.tar.gz</span><br><span class=\"line\"># 重命名为uwsgi(非必须)</span><br><span class=\"line\">$ mv uwsgi-latest/ uwsgi</span><br><span class=\"line\"># 进入uwsgi目录，编译安装</span><br><span class=\"line\">$ cd uwsgi</span><br><span class=\"line\">$ make</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>制作软连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># uwsgi连接到环境变量，便于直接使用</span><br><span class=\"line\"># 执行目录为当前uwsgi目录</span><br><span class=\"line\">ln -s ./uwsgi /usr/local/bin</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"uwsgi应用操作\"><a href=\"#uwsgi应用操作\" class=\"headerlink\" title=\"uwsgi应用操作\"></a>uwsgi应用操作</h3><ol>\n<li><p>应用启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># --ini 指定 uwsgi 配置文件路径</span><br><span class=\"line\">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应用重启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># --reload指定模式为重启</span><br><span class=\"line\"># uwsgi.pid 为 uwsgi应用的pid进程ID存储文件</span><br><span class=\"line\"># 该文件在 uwsgi.ini 中配置</span><br><span class=\"line\">uwsgi --reload uwsgi.pid</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭应用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># --reload指定模式为重启</span><br><span class=\"line\"># uwsgi.pid 为 uwsgi应用的pid进程ID存储文件</span><br><span class=\"line\"># 该文件在 uwsgi.ini 中配置</span><br><span class=\"line\">uwsgi --stop uwsgi.pid</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck2vnu8ke000azwu64rkz308k","category_id":"ck2vnu8k70006zwu6h45td0hb","_id":"ck2vnu8kk000fzwu6b6o4hhvw"},{"post_id":"ck2vnu8jz0002zwu66e6s1ace","category_id":"ck2vnu8k70006zwu6h45td0hb","_id":"ck2vnu8kl000hzwu6e3t0dtcu"},{"post_id":"ck2vnu8kg000bzwu68dzeer5y","category_id":"ck2vnu8k70006zwu6h45td0hb","_id":"ck2vnu8km000jzwu6eyjl6x2h"},{"post_id":"ck2vnu8k40004zwu6dsbt3ksh","category_id":"ck2vnu8kh000czwu6g3yj6vsf","_id":"ck2vnu8kn000lzwu6etwk7oo9"}],"PostTag":[{"post_id":"ck2vnu8jz0002zwu66e6s1ace","tag_id":"ck2vnu8k90007zwu6byqhg2nv","_id":"ck2vnu8kj000ezwu6eum26kuf"},{"post_id":"ck2vnu8k40004zwu6dsbt3ksh","tag_id":"ck2vnu8kh000dzwu62p0hbe8x","_id":"ck2vnu8kl000izwu6c0j2hwbb"},{"post_id":"ck2vnu8ka0008zwu6ewg5efh7","tag_id":"ck2vnu8kk000gzwu6coorewbq","_id":"ck2vnu8ko000mzwu6d88a15je"},{"post_id":"ck2vnu8ke000azwu64rkz308k","tag_id":"ck2vnu8kk000gzwu6coorewbq","_id":"ck2vnu8kp000ozwu61rjx91ip"},{"post_id":"ck2vnu8kg000bzwu68dzeer5y","tag_id":"ck2vnu8ko000nzwu6a7016ob1","_id":"ck2vnu8kq000pzwu6aqxkdzbm"}],"Tag":[{"name":"Docker","_id":"ck2vnu8k90007zwu6byqhg2nv"},{"name":"Hexo","_id":"ck2vnu8kh000dzwu62p0hbe8x"},{"name":"Python","_id":"ck2vnu8kk000gzwu6coorewbq"},{"name":"UWSGI","_id":"ck2vnu8ko000nzwu6a7016ob1"}]}}