<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker环境安装</title>
    <url>/2019/11/09/docker/</url>
    <content><![CDATA[<h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><p>不同的操作系统安装命令不一致</p>
<ol>
<li><p>centos命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -y 指定免交互安装</span><br><span class="line">$ sudo yum –y install docker-ce</span><br></pre></td></tr></table></figure>
</li>
<li><p>ubuntu命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装最新版Docker</span><br><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="二进制安装-–-适用离线"><a href="#二进制安装-–-适用离线" class="headerlink" title="二进制安装 – 适用离线"></a>二进制安装 – 适用离线</h3><p>二进制安装方式适合服务器无法连接外网的环境。</p>
<ol>
<li><p>准备二进制文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">官网下载稳定版，根据操作系统选择适合的版本</span><br><span class="line">下载地址：https://download.docker.com/linux/static/stable/x86_64/</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压文件并转移文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 解压文件</span><br><span class="line">$ tar –zxf docker-19.03.2.tgz</span><br><span class="line"># 移动文件</span><br><span class="line"># 将加压后文件夹的所有内容移动到某个系统环境变量下</span><br><span class="line"># 比如：/bin, usr/bin，usr/local/bin</span><br><span class="line">$ sudo cp docker/* /usr/bin/</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动docker服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动Docker服务</span><br><span class="line"># &amp; 表示后台运行</span><br><span class="line">$ sudo dockerd &amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 方式一：查看docker版本信息</span><br><span class="line">$ sudo docker version</span><br><span class="line"># 方式二：查看docker信息</span><br><span class="line">$ sudo docker info</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Docker基本操作"><a href="#Docker基本操作" class="headerlink" title="Docker基本操作"></a>Docker基本操作</h3><ol>
<li><p>应用启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建新容器---交互模式</span><br><span class="line"># 该方式用于改造镜像，生成新镜像（Dockerfile操作）</span><br><span class="line">$ docker run -it image_id /bin/bash</span><br><span class="line"></span><br><span class="line"># 创建新容器 --- 后台运行</span><br><span class="line"># 用于启动新的应用</span><br><span class="line"># -d 指定daemon模式</span><br><span class="line"># -p 指定映射端口</span><br><span class="line"># --name 指定新创建的容器的名称</span><br><span class="line">$ docker run -d -p po:pi --name c_name image_id</span><br></pre></td></tr></table></figure>
</li>
<li><p>应用查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看运行中的容器 -a 表示所有容器，包括停止的容器</span><br><span class="line">$ docker ps -a</span><br><span class="line"></span><br><span class="line"># 交互模式进入容器，可以做一些操作，比如查看日志等</span><br><span class="line"># container_id 容器的ID</span><br><span class="line"># command 进入后执行的命令，一般设置为 /bin/bash</span><br><span class="line">$ docker exec container_id command</span><br></pre></td></tr></table></figure>
</li>
<li><p>应用停止/恢复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 应用停止</span><br><span class="line"># -t 指定等待多长时间(单位：s)后推出</span><br><span class="line">$ sudo docker stop -t 60 container_id</span><br><span class="line"></span><br><span class="line"># 应用恢复</span><br><span class="line">$ sudo docker restart container_id</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>环境安装</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>uwsgi服务安装</title>
    <url>/2019/11/08/uwsgigi-server/</url>
    <content><![CDATA[<p>uwsgi是linux操作系统中，通过python编写的支持wsgi规范的python web服务器，。支持Flask/Django等编写的web程序，常用与Flask应用的生产部署。</p>
<h3 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h3><ol>
<li><p>安装 python 提供的最新版 uwsgi</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 系统级安装--非虚拟环境下安装</span><br><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure>
</li>
<li><p>制作软连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># uwsgi连接到环境变量，便于直接使用</span><br><span class="line"># uwsgi_path：uwsgi的安装路径 一般为 python_home/site-packages/uwsgi</span><br><span class="line">ln -s /uwsgi_path/uwsgi /usr/local/bin</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="二进制安装–适合离线"><a href="#二进制安装–适合离线" class="headerlink" title="二进制安装–适合离线"></a>二进制安装–适合离线</h3><ol>
<li><p>uwsgi二进制文件准备</p>
<p>方式：网络下载最新版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载地址：http://projects.unbit.it/downloads/uwsgi-latest.tar.gz</span><br><span class="line">   </span><br><span class="line">   linux系统下载: wget http://projects.unbit.it/downloads/uwsgi-latest.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件解压编译安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 解压安装包</span><br><span class="line">$ tar zxvf uwsgi-latest.tar.gz</span><br><span class="line"># 重命名为uwsgi(非必须)</span><br><span class="line">$ mv uwsgi-latest/ uwsgi</span><br><span class="line"># 进入uwsgi目录，编译安装</span><br><span class="line">$ cd uwsgi</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>
</li>
<li><p>制作软连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># uwsgi连接到环境变量，便于直接使用</span><br><span class="line"># 执行目录为当前uwsgi目录</span><br><span class="line">ln -s ./uwsgi /usr/local/bin</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="uwsgi应用操作"><a href="#uwsgi应用操作" class="headerlink" title="uwsgi应用操作"></a>uwsgi应用操作</h3><ol>
<li><p>应用启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># --ini 指定 uwsgi 配置文件路径</span><br><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure>
</li>
<li><p>应用重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># --reload指定模式为重启</span><br><span class="line"># uwsgi.pid 为 uwsgi应用的pid进程ID存储文件</span><br><span class="line"># 该文件在 uwsgi.ini 中配置</span><br><span class="line">uwsgi --reload uwsgi.pid</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭应用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># --reload指定模式为重启</span><br><span class="line"># uwsgi.pid 为 uwsgi应用的pid进程ID存储文件</span><br><span class="line"># 该文件在 uwsgi.ini 中配置</span><br><span class="line">uwsgi --stop uwsgi.pid</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>环境安装</category>
      </categories>
      <tags>
        <tag>UWSGI</tag>
      </tags>
  </entry>
  <entry>
    <title>Python环境安装</title>
    <url>/2019/11/08/python/</url>
    <content><![CDATA[<blockquote>
<ol>
<li><p>下载Python二进制文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载地址：https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</span><br><span class="line">linux系统下载: wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</span><br></pre></td></tr></table></figure>
</li>
<li><p>将二进制文件上传到要安装服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SSH软件上传</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装–以下步骤都在要安装的服务器上操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. tar -zxvf Python-3.7.4.tgz # 解压安装包</span><br><span class="line">2. cd ./Python-3.7.4  # 进入解压后的目录</span><br><span class="line">3. ./configure --prefix=/usr/local/my_python_path #初始配置，--prefix指定安装目录</span><br><span class="line">4. make &amp;&amp; make install  # 编译源码 + 程序安装</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完成，配置环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 建立软连接到系统环境变量</span><br><span class="line">	ln -s /usr/local/my_python_path/bin/python3 /usr/bin/python3 </span><br><span class="line">2. pip 建立</span><br><span class="line">	ln -s /usr/local/my_python_path/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. python3 -V # 验证python3</span><br><span class="line">2. pip3 -V # 验证pip</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新pip(非必须)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># python自带pip可能不是最新，可以更新</span><br><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>

</li>
</ol>
</blockquote>
<h3 id="开启虚拟环境-非必须"><a href="#开启虚拟环境-非必须" class="headerlink" title="开启虚拟环境(非必须)"></a>开启虚拟环境(非必须)</h3><blockquote>
<p>虚拟环境是指针对部署项目的一个单独的python环境（依赖包归该虚拟环境所有），其他项目的依赖不会对其产生影响。</p>
<p>虚拟环境不是必须的，只有在多个python项目运行，且互相依赖的相同依赖包版本不一致时，才是必须的。</p>
<ol>
<li><p>初始化虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入想要生成虚拟环境的目录下 比如 ~/apps/model</span><br><span class="line"># 其中第一个venv是python生成虚拟环境的命令</span><br><span class="line"># 第二个venv是虚拟环境存放的目录，可以修改成其他名字，比如venv-model</span><br><span class="line">python3 -m venv venv</span><br><span class="line">python3 -m venv venv-model</span><br></pre></td></tr></table></figure>
</li>
<li><p>激活虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 激活虚拟环境--linux系统</span><br><span class="line">source venv/bin/activate</span><br><span class="line"># 激活虚拟环境--windows系统</span><br><span class="line">venv/Scripts/activate.bat</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在当前虚拟环境下，运行</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>虚拟环境生成后，就是一个python的运行环境，操作与在系统中一样。</p>
</blockquote>
<h3 id="依赖包安装"><a href="#依赖包安装" class="headerlink" title="依赖包安装"></a>依赖包安装</h3><hr>
<p>如果是在虚拟环境中运行项目，请激活虚拟环境后，在虚拟环境下操作，反之在当前系统下操作即可。</p>
<h4 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h4><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> # 安装依赖包 -r 指定依赖文件</span><br><span class="line">1. pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h4><blockquote>
<ol>
<li><p>备份依赖包—可上网的开发环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 备份依赖关系</span><br><span class="line">1. pip3 freeze &gt; requirement.txt</span><br><span class="line"># 在线下载依赖包到指定目录</span><br><span class="line">2. pip3 download -d pack_directory -r requirements.txt</span><br><span class="line">	-d 指定依赖包保存目录</span><br><span class="line">	-r 指定依赖包汇总文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>还原依赖包—离线服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装依赖包</span><br><span class="line">1. pip3 install --no-index --find-links=pack_directory -r requirements.txt</span><br><span class="line"> --no-index 禁止去网络下载</span><br><span class="line"> --find-links 指定去哪里寻找安装包，这里是安装包文件夹</span><br><span class="line"> -r 指定依赖包文件</span><br></pre></td></tr></table></figure>

</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>环境安装</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
