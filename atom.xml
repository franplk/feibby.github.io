<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Franplk</title>
  
  <subtitle>走在技术之路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-11T02:26:50.424Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Franplk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pyinstaller程序打包与发布</title>
    <link href="http://yoursite.com/2019/11/11/pyinstaller/"/>
    <id>http://yoursite.com/2019/11/11/pyinstaller/</id>
    <published>2019-11-11T01:36:27.000Z</published>
    <updated>2019-11-11T02:26:50.424Z</updated>
    
    <content type="html"><![CDATA[<p>该文档说明了如何使用 pyinstaller 将应用打包成可执行的exe文件</p><a id="more"></a><h3 id="Pyinstaller安装"><a href="#Pyinstaller安装" class="headerlink" title="Pyinstaller安装"></a>Pyinstaller安装</h3><blockquote><ol><li><p>使用pip进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">$ pip install pyinstaller</span><br></pre></td></tr></table></figure></li><li><p>几个命令介绍</p><table><thead><tr><th align="center">命令选项</th><th align="left">命令说明</th></tr></thead><tbody><tr><td align="center">-F</td><td align="left">打包成单个exe文件</td></tr><tr><td align="center">-D</td><td align="left">打包成文件形式。Flask项目因为有非python文件，需要使用该选项</td></tr><tr><td align="center">-i</td><td align="left">指定打包后应用程序的图标 — ico文件</td></tr><tr><td align="center">-w</td><td align="left">指定对于Qt桌面程序，不显示Dos窗口</td></tr><tr><td align="center">-d</td><td align="left">编译为debug模式，用于测试时获取日志信息</td></tr></tbody></table></li></ol></blockquote><h3 id="应用程序打包"><a href="#应用程序打包" class="headerlink" title="应用程序打包"></a>应用程序打包</h3><blockquote><ol><li><p>打包成EXE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#在项目根目录下，执行打包命令</span><br><span class="line">$ pyinstaller -D -w code/run.py</span><br><span class="line"></span><br><span class="line"># 如果已有 .spec 文件，可以执行以下命令打包</span><br><span class="line">$ pyinstaller run.spec</span><br></pre></td></tr></table></figure></li><li><p>找到可执行文件目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.1 打包完成后，生成一个dist目录，下面有一个run文件夹。run文件夹下面包含了可执行文件以及所有的项目依赖文件。</span><br><span class="line">2.2 对于Flask项目，在运行前需要将resources目录复制到该文件夹下面</span><br></pre></td></tr></table></figure></li><li><p>运行/发布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行 run.exe即可</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="制作程序安装包"><a href="#制作程序安装包" class="headerlink" title="制作程序安装包"></a>制作程序安装包</h3><blockquote><p>制作成安装包需要使用 Inno SetUp 软件。</p><ol><li><p>安装 InnoSetUp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载安装 inno setup （下载地址：http://www.jrsoftware.org/isdl.php）</span><br></pre></td></tr></table></figure></li><li><p>启动 InnoSetUp 新建项目即可根据步骤完成</p></li><li><p>制作完成后，可以进行正常发布</p></li></ol></blockquote><h3 id="出现问题以及解决"><a href="#出现问题以及解决" class="headerlink" title="出现问题以及解决"></a>出现问题以及解决</h3><blockquote><ol><li>pyinstaller与PyQt版本兼容问题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原因：pyinstaller要与PyQt5的版本对应</span><br><span class="line"></span><br><span class="line">解决方案：目前已测试 pyinstaller 3.5 需要使用 PyQt5==5.13.1 版本。</span><br><span class="line">其他具体兼容性需要去官网查询</span><br></pre></td></tr></table></figure><ol start="2"><li>sklearn等机器学习包不能打包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">原因：该问题是因为机器学习包等用到了大量的C++库。这些文件是c/c++编译成的python库，供python调用，需要额外处理。</span><br><span class="line"></span><br><span class="line">解决方案：将这些库添加到 spec文件的 hiddenimports 属性中。</span><br><span class="line">hiddenimports=[&apos;cython&apos;,&apos;sklearn&apos;,&apos;sklearn.utils._cython_blas&apos;,</span><br><span class="line">    &apos;sklearn.neighbors.typedefs&apos;,</span><br><span class="line">    &apos;sklearn.neighbors.quad_tree&apos;,</span><br><span class="line">    &apos;sklearn.neighbors.ball_tree&apos;,</span><br><span class="line">    &apos;sklearn.neighbors.dist_metrics&apos;,</span><br><span class="line">    &apos;sklearn.neighbors.kd_tree&apos;,</span><br><span class="line">    &apos;sklearn.tree._utils&apos;,</span><br><span class="line">    &apos;sklearn.tree._criterion&apos;,</span><br><span class="line">    &apos;sklearn.tree._splitter&apos;,</span><br><span class="line">    &apos;sklearn.tree._utils&apos;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">参考链接：[https://bbs.testerhome.com/articles/19886]</span><br></pre></td></tr></table></figure><ol start="3"><li>pyecharts 不兼容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">描述：使用pyinstaller进行python程序打包的时候，对pyecharts是不兼容的，因此不能将pyecharts打包到程序当中。</span><br><span class="line"></span><br><span class="line">原因：pyecharts涉及到一些js，json文件没有打包，使得整个打包软件找不到相关文件，所以报错。</span><br><span class="line"></span><br><span class="line">解决：从python的site_package中找到pyecharts文件夹，并把这整个文件夹都放到与exe文件同级的文件夹下面即可</span><br><span class="line"></span><br><span class="line">参考链接：[https://blog.csdn.net/weixin_43865152/article/details/93781051]</span><br></pre></td></tr></table></figure><ol start="4"><li><p>打包多进程程序，运行卡死电脑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">具体表现：</span><br><span class="line">在使用Pyinstaller打包Python程序的时，打包过程正常，但在运行时会出错，表现为进程不断增加至占满电脑CPU死机。</span><br><span class="line"></span><br><span class="line">原因：</span><br><span class="line">因为程序使用了多进程模式，而在windows上Pyinstaller打包不支持多进程程序，需要添加特殊指令。</span><br><span class="line"></span><br><span class="line">解决方案：</span><br><span class="line">在 if __name__==&apos;__main__:&apos;下添加一句</span><br><span class="line">multiprocessing.freeze_support()</span><br><span class="line">即可。</span><br><span class="line"></span><br><span class="line">参考链接：[https://blog.csdn.net/zyc121561/article/details/82941056]</span><br></pre></td></tr></table></figure></li><li><p>后续补充</p></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该文档说明了如何使用 pyinstaller 将应用打包成可执行的exe文件&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Docker环境安装</title>
    <link href="http://yoursite.com/2019/11/09/docker/"/>
    <id>http://yoursite.com/2019/11/09/docker/</id>
    <published>2019-11-09T08:50:51.000Z</published>
    <updated>2019-11-11T02:30:16.751Z</updated>
    
    <content type="html"><![CDATA[<p> Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。 </p><p>本文介绍了Docker的简单安装部署，以及几个简单命令操作</p><a id="more"></a><h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><p>不同的操作系统安装命令不一致</p><ol><li><p>centos命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -y 指定免交互安装</span><br><span class="line">$ sudo yum –y install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>ubuntu命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装最新版Docker</span><br><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure></li></ol><h3 id="二进制安装-–-适用离线"><a href="#二进制安装-–-适用离线" class="headerlink" title="二进制安装 – 适用离线"></a>二进制安装 – 适用离线</h3><p>二进制安装方式适合服务器无法连接外网的环境。</p><ol><li><p>准备二进制文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">官网下载稳定版，根据操作系统选择适合的版本</span><br><span class="line">下载地址：https://download.docker.com/linux/static/stable/x86_64/</span><br></pre></td></tr></table></figure></li><li><p>解压文件并转移文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 解压文件</span><br><span class="line">$ tar –zxf docker-19.03.2.tgz</span><br><span class="line"># 移动文件</span><br><span class="line"># 将加压后文件夹的所有内容移动到某个系统环境变量下</span><br><span class="line"># 比如：/bin, usr/bin，usr/local/bin</span><br><span class="line">$ sudo cp docker/* /usr/bin/</span><br></pre></td></tr></table></figure></li><li><p>启动docker服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 启动Docker服务</span><br><span class="line"># &amp; 表示后台运行</span><br><span class="line">$ sudo dockerd &amp;</span><br></pre></td></tr></table></figure></li><li><p>验证安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：查看docker版本信息</span><br><span class="line">$ sudo docker version</span><br><span class="line"># 方式二：查看docker信息</span><br><span class="line">$ sudo docker info</span><br></pre></td></tr></table></figure></li></ol><h3 id="Docker基本操作"><a href="#Docker基本操作" class="headerlink" title="Docker基本操作"></a>Docker基本操作</h3><ol><li><p>应用启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 创建新容器---交互模式</span><br><span class="line"># 该方式用于改造镜像，生成新镜像（Dockerfile操作）</span><br><span class="line">$ docker run -it image_id /bin/bash</span><br><span class="line"></span><br><span class="line"># 创建新容器 --- 后台运行</span><br><span class="line"># 用于启动新的应用</span><br><span class="line"># -d 指定daemon模式</span><br><span class="line"># -p 指定映射端口</span><br><span class="line"># --name 指定新创建的容器的名称</span><br><span class="line">$ docker run -d -p po:pi --name c_name image_id</span><br></pre></td></tr></table></figure></li><li><p>应用查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 查看运行中的容器 -a 表示所有容器，包括停止的容器</span><br><span class="line">$ docker ps -a</span><br><span class="line"></span><br><span class="line"># 交互模式进入容器，可以做一些操作，比如查看日志等</span><br><span class="line"># container_id 容器的ID</span><br><span class="line"># command 进入后执行的命令，一般设置为 /bin/bash</span><br><span class="line">$ docker exec container_id command</span><br></pre></td></tr></table></figure></li><li><p>应用停止/恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 应用停止</span><br><span class="line"># -t 指定等待多长时间(单位：s)后推出</span><br><span class="line">$ sudo docker stop -t 60 container_id</span><br><span class="line"></span><br><span class="line"># 应用恢复</span><br><span class="line">$ sudo docker restart container_id</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。 &lt;/p&gt;
&lt;p&gt;本文介绍了Docker的简单安装部署，以及几个简单命令操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境安装" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>uwsgi服务安装</title>
    <link href="http://yoursite.com/2019/11/08/uwsgigi-server/"/>
    <id>http://yoursite.com/2019/11/08/uwsgigi-server/</id>
    <published>2019-11-08T12:50:51.000Z</published>
    <updated>2019-11-11T02:27:36.769Z</updated>
    
    <content type="html"><![CDATA[<p>uwsgi是linux操作系统中，通过python编写的支持wsgi规范的python web服务器，。支持Flask/Django等编写的web程序，常用与Flask应用的生产部署。</p><a id="more"></a><h3 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h3><ol><li><p>安装 python 提供的最新版 uwsgi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 系统级安装--非虚拟环境下安装</span><br><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure></li><li><p>制作软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># uwsgi连接到环境变量，便于直接使用</span><br><span class="line"># uwsgi_path：uwsgi的安装路径 一般为 python_home/site-packages/uwsgi</span><br><span class="line">ln -s /uwsgi_path/uwsgi /usr/local/bin</span><br></pre></td></tr></table></figure></li></ol><h3 id="二进制安装–适合离线"><a href="#二进制安装–适合离线" class="headerlink" title="二进制安装–适合离线"></a>二进制安装–适合离线</h3><ol><li><p>uwsgi二进制文件准备</p><p>方式：网络下载最新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下载地址：http://projects.unbit.it/downloads/uwsgi-latest.tar.gz</span><br><span class="line">   </span><br><span class="line">   linux系统下载: wget http://projects.unbit.it/downloads/uwsgi-latest.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>文件解压编译安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 解压安装包</span><br><span class="line">$ tar zxvf uwsgi-latest.tar.gz</span><br><span class="line"># 重命名为uwsgi(非必须)</span><br><span class="line">$ mv uwsgi-latest/ uwsgi</span><br><span class="line"># 进入uwsgi目录，编译安装</span><br><span class="line">$ cd uwsgi</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure></li><li><p>制作软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># uwsgi连接到环境变量，便于直接使用</span><br><span class="line"># 执行目录为当前uwsgi目录</span><br><span class="line">ln -s ./uwsgi /usr/local/bin</span><br></pre></td></tr></table></figure></li></ol><h3 id="uwsgi应用操作"><a href="#uwsgi应用操作" class="headerlink" title="uwsgi应用操作"></a>uwsgi应用操作</h3><ol><li><p>应用启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># --ini 指定 uwsgi 配置文件路径</span><br><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure></li><li><p>应用重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># --reload指定模式为重启</span><br><span class="line"># uwsgi.pid 为 uwsgi应用的pid进程ID存储文件</span><br><span class="line"># 该文件在 uwsgi.ini 中配置</span><br><span class="line">uwsgi --reload uwsgi.pid</span><br></pre></td></tr></table></figure></li><li><p>关闭应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># --reload指定模式为重启</span><br><span class="line"># uwsgi.pid 为 uwsgi应用的pid进程ID存储文件</span><br><span class="line"># 该文件在 uwsgi.ini 中配置</span><br><span class="line">uwsgi --stop uwsgi.pid</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;uwsgi是linux操作系统中，通过python编写的支持wsgi规范的python web服务器，。支持Flask/Django等编写的web程序，常用与Flask应用的生产部署。&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境安装" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="UWSGI" scheme="http://yoursite.com/tags/UWSGI/"/>
    
  </entry>
  
  <entry>
    <title>Python环境安装</title>
    <link href="http://yoursite.com/2019/11/08/python/"/>
    <id>http://yoursite.com/2019/11/08/python/</id>
    <published>2019-11-08T09:50:51.000Z</published>
    <updated>2019-11-11T02:44:55.006Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了Python环境的安装， 以及依赖包的在线和离线状态下的下载与更新。同时对虚拟环境的开启做了简单介绍。</p><a id="more"></a><blockquote><ol><li><p>下载Python二进制文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载地址：https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</span><br><span class="line">linux系统下载: wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</span><br></pre></td></tr></table></figure></li><li><p>将二进制文件上传到要安装服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSH软件上传</span><br></pre></td></tr></table></figure></li><li><p>安装–以下步骤都在要安装的服务器上操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. tar -zxvf Python-3.7.4.tgz # 解压安装包</span><br><span class="line">2. cd ./Python-3.7.4  # 进入解压后的目录</span><br><span class="line">3. ./configure --prefix=/usr/local/my_python_path #初始配置，--prefix指定安装目录</span><br><span class="line">4. make &amp;&amp; make install  # 编译源码 + 程序安装</span><br></pre></td></tr></table></figure></li><li><p>安装完成，配置环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 建立软连接到系统环境变量</span><br><span class="line">ln -s /usr/local/my_python_path/bin/python3 /usr/bin/python3 </span><br><span class="line">2. pip 建立</span><br><span class="line">ln -s /usr/local/my_python_path/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure></li><li><p>测试是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. python3 -V # 验证python3</span><br><span class="line">2. pip3 -V # 验证pip</span><br></pre></td></tr></table></figure></li><li><p>更新pip(非必须)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># python自带pip可能不是最新，可以更新</span><br><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="开启虚拟环境-非必须"><a href="#开启虚拟环境-非必须" class="headerlink" title="开启虚拟环境(非必须)"></a>开启虚拟环境(非必须)</h3><blockquote><p>虚拟环境是指针对部署项目的一个单独的python环境（依赖包归该虚拟环境所有），其他项目的依赖不会对其产生影响。</p><p>虚拟环境不是必须的，只有在多个python项目运行，且互相依赖的相同依赖包版本不一致时，才是必须的。</p><ol><li><p>初始化虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 进入想要生成虚拟环境的目录下 比如 ~/apps/model</span><br><span class="line"># 其中第一个venv是python生成虚拟环境的命令</span><br><span class="line"># 第二个venv是虚拟环境存放的目录，可以修改成其他名字，比如venv-model</span><br><span class="line">python3 -m venv venv</span><br><span class="line">python3 -m venv venv-model</span><br></pre></td></tr></table></figure></li><li><p>激活虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 激活虚拟环境--linux系统</span><br><span class="line">source venv/bin/activate</span><br><span class="line"># 激活虚拟环境--windows系统</span><br><span class="line">venv/Scripts/activate.bat</span><br></pre></td></tr></table></figure></li><li><p>退出虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在当前虚拟环境下，运行</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure></li></ol><p>虚拟环境生成后，就是一个python的运行环境，操作与在系统中一样。</p></blockquote><h3 id="依赖包安装"><a href="#依赖包安装" class="headerlink" title="依赖包安装"></a>依赖包安装</h3><hr><p>如果是在虚拟环境中运行项目，请激活虚拟环境后，在虚拟环境下操作，反之在当前系统下操作即可。</p><h4 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h4><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> # 安装依赖包 -r 指定依赖文件</span><br><span class="line">1. pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure></blockquote><h4 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h4><blockquote><ol><li><p>备份依赖包—可上网的开发环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 备份依赖关系</span><br><span class="line">1. pip3 freeze &gt; requirement.txt</span><br><span class="line"># 在线下载依赖包到指定目录</span><br><span class="line">2. pip3 download -d pack_directory -r requirements.txt</span><br><span class="line">-d 指定依赖包保存目录</span><br><span class="line">-r 指定依赖包汇总文件</span><br></pre></td></tr></table></figure></li><li><p>还原依赖包—离线服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装依赖包</span><br><span class="line">1. pip3 install --no-index --find-links=pack_directory -r requirements.txt</span><br><span class="line"> --no-index 禁止去网络下载</span><br><span class="line"> --find-links 指定去哪里寻找安装包，这里是安装包文件夹</span><br><span class="line"> -r 指定依赖包文件</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了Python环境的安装， 以及依赖包的在线和离线状态下的下载与更新。同时对虚拟环境的开启做了简单介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境安装" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
</feed>
