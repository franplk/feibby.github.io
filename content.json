{"meta":{"title":"Franplk","subtitle":"走在技术之路","description":"爱家庭，爱生活，爱技术","author":"Franplk","url":"https://franplk.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2019-09-22T02:41:27.000Z","updated":"2019-11-08T13:20:41.673Z","comments":true,"path":"404.html","permalink":"https://franplk.github.io/404.html","excerpt":"","text":"对不起，您所访问的页面不存在或者已删除。 您可以点击此处返回首页。 Franplk"},{"title":"","date":"2019-11-11T08:38:28.476Z","updated":"2019-11-11T08:38:28.476Z","comments":true,"path":"about/index.html","permalink":"https://franplk.github.io/about/index.html","excerpt":"","text":"关于我从事 Python开发，有一定的代码洁癖。 使用 Flask框架进行Web开发；使用pandas进行数据分析。 对机器学习有浓厚的兴趣，使用sk-learn进行分类模型构建。 对前端、后端、数据分析等技能均有所涉猎。 热爱开源项目、热爱新技术、热爱新事物。 关于工作城市：北京 关于学习喜欢学习新东西…目前正在学习方向：Python Flask开发，NLP方向，机器学习方向 关于座右铭 欲为大树，何须与草争！ 关于爱好热爱运动，喜爱围棋、阅读、旅行。 联系我 Email: franplk@126.com GitHub: Franplk"},{"title":"文章分类","date":"2019-11-08T13:05:00.000Z","updated":"2019-11-11T06:38:49.838Z","comments":false,"path":"categories/index.html","permalink":"https://franplk.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-11-08T12:56:58.000Z","updated":"2019-11-08T13:10:30.071Z","comments":false,"path":"tags/index.html","permalink":"https://franplk.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"pyinstaller程序打包与发布","slug":"pyinstaller","date":"2019-11-11T01:36:27.000Z","updated":"2019-11-11T02:26:50.424Z","comments":true,"path":"2019/11/11/pyinstaller/","link":"","permalink":"https://franplk.github.io/2019/11/11/pyinstaller/","excerpt":"该文档说明了如何使用 pyinstaller 将应用打包成可执行的exe文件","text":"该文档说明了如何使用 pyinstaller 将应用打包成可执行的exe文件 Pyinstaller安装 使用pip进行安装 12# 安装$ pip install pyinstaller 几个命令介绍 命令选项 命令说明 -F 打包成单个exe文件 -D 打包成文件形式。Flask项目因为有非python文件，需要使用该选项 -i 指定打包后应用程序的图标 — ico文件 -w 指定对于Qt桌面程序，不显示Dos窗口 -d 编译为debug模式，用于测试时获取日志信息 应用程序打包 打包成EXE 12345#在项目根目录下，执行打包命令$ pyinstaller -D -w code/run.py# 如果已有 .spec 文件，可以执行以下命令打包$ pyinstaller run.spec 找到可执行文件目录 122.1 打包完成后，生成一个dist目录，下面有一个run文件夹。run文件夹下面包含了可执行文件以及所有的项目依赖文件。2.2 对于Flask项目，在运行前需要将resources目录复制到该文件夹下面 运行/发布 1运行 run.exe即可 制作程序安装包 制作成安装包需要使用 Inno SetUp 软件。 安装 InnoSetUp 1下载安装 inno setup （下载地址：http://www.jrsoftware.org/isdl.php） 启动 InnoSetUp 新建项目即可根据步骤完成 制作完成后，可以进行正常发布 出现问题以及解决 pyinstaller与PyQt版本兼容问题 1234原因：pyinstaller要与PyQt5的版本对应解决方案：目前已测试 pyinstaller 3.5 需要使用 PyQt5==5.13.1 版本。其他具体兼容性需要去官网查询 sklearn等机器学习包不能打包 12345678910111213141516原因：该问题是因为机器学习包等用到了大量的C++库。这些文件是c/c++编译成的python库，供python调用，需要额外处理。解决方案：将这些库添加到 spec文件的 hiddenimports 属性中。hiddenimports=[&apos;cython&apos;,&apos;sklearn&apos;,&apos;sklearn.utils._cython_blas&apos;, &apos;sklearn.neighbors.typedefs&apos;, &apos;sklearn.neighbors.quad_tree&apos;, &apos;sklearn.neighbors.ball_tree&apos;, &apos;sklearn.neighbors.dist_metrics&apos;, &apos;sklearn.neighbors.kd_tree&apos;, &apos;sklearn.tree._utils&apos;, &apos;sklearn.tree._criterion&apos;, &apos;sklearn.tree._splitter&apos;, &apos;sklearn.tree._utils&apos;],参考链接：[https://bbs.testerhome.com/articles/19886] pyecharts 不兼容 1234567描述：使用pyinstaller进行python程序打包的时候，对pyecharts是不兼容的，因此不能将pyecharts打包到程序当中。原因：pyecharts涉及到一些js，json文件没有打包，使得整个打包软件找不到相关文件，所以报错。解决：从python的site_package中找到pyecharts文件夹，并把这整个文件夹都放到与exe文件同级的文件夹下面即可参考链接：[https://blog.csdn.net/weixin_43865152/article/details/93781051] 打包多进程程序，运行卡死电脑 123456789101112具体表现：在使用Pyinstaller打包Python程序的时，打包过程正常，但在运行时会出错，表现为进程不断增加至占满电脑CPU死机。原因：因为程序使用了多进程模式，而在windows上Pyinstaller打包不支持多进程程序，需要添加特殊指令。解决方案：在 if __name__==&apos;__main__:&apos;下添加一句 multiprocessing.freeze_support()即可。参考链接：[https://blog.csdn.net/zyc121561/article/details/82941056] 后续补充","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://franplk.github.io/tags/Python/"}]},{"title":"Docker环境安装","slug":"docker","date":"2019-11-09T08:50:51.000Z","updated":"2019-11-11T07:54:35.051Z","comments":true,"path":"2019/11/09/docker/","link":"","permalink":"https://franplk.github.io/2019/11/09/docker/","excerpt":"Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。","text":"Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。 本文介绍了Docker的简单安装部署，以及几个简单命令操作 在线安装不同的操作系统安装命令不一致 centos命令 12# -y 指定免交互安装$ sudo yum –y install docker-ce ubuntu命令 12# 安装最新版Docker$ sudo apt-get install docker-ce 二进制安装 – 适用离线二进制安装方式适合服务器无法连接外网的环境。 准备二进制文件 12官网下载稳定版，根据操作系统选择适合的版本下载地址：https://download.docker.com/linux/static/stable/x86_64/ 解压文件并转移文件 123456# 解压文件$ tar –zxf docker-19.03.2.tgz# 移动文件# 将加压后文件夹的所有内容移动到某个系统环境变量下# 比如：/bin, usr/bin，usr/local/bin$ sudo cp docker/* /usr/bin/ 启动docker服务 123# 启动Docker服务# &amp; 表示后台运行$ sudo dockerd &amp; 验证安装成功 1234# 方式一：查看docker版本信息$ sudo docker version# 方式二：查看docker信息$ sudo docker info Docker基本操作 应用启动 12345678910# 创建新容器---交互模式# 该方式用于改造镜像，生成新镜像（Dockerfile操作）$ docker run -it image_id /bin/bash# 创建新容器 --- 后台运行# 用于启动新的应用# -d 指定daemon模式# -p 指定映射端口# --name 指定新创建的容器的名称$ docker run -d -p po:pi --name c_name image_id 应用查看 1234567# 查看运行中的容器 -a 表示所有容器，包括停止的容器$ docker ps -a# 交互模式进入容器，可以做一些操作，比如查看日志等# container_id 容器的ID# command 进入后执行的命令，一般设置为 /bin/bash$ docker exec container_id command 应用停止/恢复 123456# 应用停止# -t 指定等待多长时间(单位：s)后推出$ sudo docker stop -t 60 container_id# 应用恢复$ sudo docker restart container_id","categories":[{"name":"环境安装","slug":"环境安装","permalink":"https://franplk.github.io/categories/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://franplk.github.io/tags/Docker/"}]},{"title":"uwsgi服务安装","slug":"uwsgigi-server","date":"2019-11-08T12:50:51.000Z","updated":"2019-11-11T02:27:36.769Z","comments":true,"path":"2019/11/08/uwsgigi-server/","link":"","permalink":"https://franplk.github.io/2019/11/08/uwsgigi-server/","excerpt":"uwsgi是linux操作系统中，通过python编写的支持wsgi规范的python web服务器，。支持Flask/Django等编写的web程序，常用与Flask应用的生产部署。","text":"uwsgi是linux操作系统中，通过python编写的支持wsgi规范的python web服务器，。支持Flask/Django等编写的web程序，常用与Flask应用的生产部署。 pip安装 安装 python 提供的最新版 uwsgi 12# 系统级安装--非虚拟环境下安装pip install uwsgi 制作软连接 123# uwsgi连接到环境变量，便于直接使用# uwsgi_path：uwsgi的安装路径 一般为 python_home/site-packages/uwsgiln -s /uwsgi_path/uwsgi /usr/local/bin 二进制安装–适合离线 uwsgi二进制文件准备 方式：网络下载最新版本 123下载地址：http://projects.unbit.it/downloads/uwsgi-latest.tar.gz linux系统下载: wget http://projects.unbit.it/downloads/uwsgi-latest.tar.gz 文件解压编译安装 1234567# 解压安装包$ tar zxvf uwsgi-latest.tar.gz# 重命名为uwsgi(非必须)$ mv uwsgi-latest/ uwsgi# 进入uwsgi目录，编译安装$ cd uwsgi$ make 制作软连接 123# uwsgi连接到环境变量，便于直接使用# 执行目录为当前uwsgi目录ln -s ./uwsgi /usr/local/bin uwsgi应用操作 应用启动 12# --ini 指定 uwsgi 配置文件路径uwsgi --ini uwsgi.ini 应用重启 1234# --reload指定模式为重启# uwsgi.pid 为 uwsgi应用的pid进程ID存储文件# 该文件在 uwsgi.ini 中配置uwsgi --reload uwsgi.pid 关闭应用 1234# --reload指定模式为重启# uwsgi.pid 为 uwsgi应用的pid进程ID存储文件# 该文件在 uwsgi.ini 中配置uwsgi --stop uwsgi.pid","categories":[{"name":"环境安装","slug":"环境安装","permalink":"https://franplk.github.io/categories/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"}],"tags":[{"name":"UWSGI","slug":"UWSGI","permalink":"https://franplk.github.io/tags/UWSGI/"}]},{"title":"Python环境安装","slug":"python","date":"2019-11-08T09:50:51.000Z","updated":"2019-11-11T02:44:55.006Z","comments":true,"path":"2019/11/08/python/","link":"","permalink":"https://franplk.github.io/2019/11/08/python/","excerpt":"本文介绍了Python环境的安装， 以及依赖包的在线和离线状态下的下载与更新。同时对虚拟环境的开启做了简单介绍。","text":"本文介绍了Python环境的安装， 以及依赖包的在线和离线状态下的下载与更新。同时对虚拟环境的开启做了简单介绍。 下载Python二进制文件 12下载地址：https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgzlinux系统下载: wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz 将二进制文件上传到要安装服务器 1SSH软件上传 安装–以下步骤都在要安装的服务器上操作 12341. tar -zxvf Python-3.7.4.tgz # 解压安装包2. cd ./Python-3.7.4 # 进入解压后的目录3. ./configure --prefix=/usr/local/my_python_path #初始配置，--prefix指定安装目录4. make &amp;&amp; make install # 编译源码 + 程序安装 安装完成，配置环境 12341. 建立软连接到系统环境变量 ln -s /usr/local/my_python_path/bin/python3 /usr/bin/python3 2. pip 建立 ln -s /usr/local/my_python_path/bin/pip3 /usr/bin/pip3 测试是否安装成功 121. python3 -V # 验证python32. pip3 -V # 验证pip 更新pip(非必须) 12# python自带pip可能不是最新，可以更新pip3 install --upgrade pip 开启虚拟环境(非必须) 虚拟环境是指针对部署项目的一个单独的python环境（依赖包归该虚拟环境所有），其他项目的依赖不会对其产生影响。 虚拟环境不是必须的，只有在多个python项目运行，且互相依赖的相同依赖包版本不一致时，才是必须的。 初始化虚拟环境 12345# 进入想要生成虚拟环境的目录下 比如 ~/apps/model# 其中第一个venv是python生成虚拟环境的命令# 第二个venv是虚拟环境存放的目录，可以修改成其他名字，比如venv-modelpython3 -m venv venvpython3 -m venv venv-model 激活虚拟环境 1234# 激活虚拟环境--linux系统source venv/bin/activate# 激活虚拟环境--windows系统venv/Scripts/activate.bat 退出虚拟环境 12# 在当前虚拟环境下，运行deactivate 虚拟环境生成后，就是一个python的运行环境，操作与在系统中一样。 依赖包安装 如果是在虚拟环境中运行项目，请激活虚拟环境后，在虚拟环境下操作，反之在当前系统下操作即可。 在线安装 12 # 安装依赖包 -r 指定依赖文件1. pip3 install -r requirements.txt 离线安装 备份依赖包—可上网的开发环境 123456# 备份依赖关系1. pip3 freeze &gt; requirement.txt# 在线下载依赖包到指定目录2. pip3 download -d pack_directory -r requirements.txt -d 指定依赖包保存目录 -r 指定依赖包汇总文件 还原依赖包—离线服务器 12345# 安装依赖包1. pip3 install --no-index --find-links=pack_directory -r requirements.txt --no-index 禁止去网络下载 --find-links 指定去哪里寻找安装包，这里是安装包文件夹 -r 指定依赖包文件","categories":[{"name":"环境安装","slug":"环境安装","permalink":"https://franplk.github.io/categories/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://franplk.github.io/tags/Python/"}]}]}